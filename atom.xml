<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rushroom&#39;s Blog</title>
  
  
  <link href="http://rushroom.top/atom.xml" rel="self"/>
  
  <link href="http://rushroom.top/"/>
  <updated>2023-08-16T15:00:06.263Z</updated>
  <id>http://rushroom.top/</id>
  
  <author>
    <name>Rushroom</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>百度之星2023初赛游记</title>
    <link href="http://rushroom.top/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2023%E5%88%9D%E8%B5%9B%E6%B8%B8%E8%AE%B0/"/>
    <id>http://rushroom.top/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2023%E5%88%9D%E8%B5%9B%E6%B8%B8%E8%AE%B0/</id>
    <published>2023-08-16T13:19:48.629Z</published>
    <updated>2023-08-16T15:00:06.263Z</updated>
    
    <content type="html"><![CDATA[<p>打得是第一场，赛时只做出了5题，rk50几，感觉不太行。</p><p><a href="https://www.matiji.net/exam/ojquestionlist?questionBankId=179CE77A7B772D15A8C00DD8198AAC74">题目传送门</a></p><span id="more"></span><h1 id="1-2-3-5"><a href="#1-2-3-5" class="headerlink" title="1, 2, 3, 5"></a>1, 2, 3, 5</h1><p>十分简单，四道签到题，三道是二分。</p><h1 id="6-随机序列逆序数"><a href="#6-随机序列逆序数" class="headerlink" title="6. 随机序列逆序数"></a>6. 随机序列逆序数</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个集合 $b$，大小为 $n$。</p><p>执行 $n$ 次操作。每次操作取出一个数。记此时集合中所有数之和为 $s$，则取出 $x$ 的概率为 $\dfrac{x}{s}$。取出后不再放回。</p><p>取出的数依次组成数列 $a$，求 $a$ 的逆序对数量的期望值$\mod 998244353$。</p><p>$n \le 10^6, b_i \le 10^5$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑两个数 $x, y$ $(x&lt;y)$ 形成逆序对的概率是多少。</p><p>设 $m$ 为第 $m$ 次操作前，$x,y$ 都没被取出，第 $m$ 次操作时，$x,y$ 中有一个被取出。那么 $y$ 在此时被取出的概率即为 $\dfrac{y}{x+y}$。因此问题的答案就是 $\sum\limits_{x&lt;y} \dfrac{y}{x+y}$。</p><p>使用分治 NTT 解决。设 $c_i$ 为集合中 $i$ 的数量，在 $c$ 上进行分治。</p><p>合并时，把分母相同的放在一起算，即要求出 $\sum\limits_{x+y&#x3D;s} y$。对于左边一半，$f_i&#x3D;c_i$；对于右边一半，$g_i&#x3D;c_i\cdot i$。这样 $f\cdot g$ 的第 $s$ 位即为所求。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>似乎卡常，递归的NTT无法通过，需要写非递归版。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000006</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)p = p * x % mod;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, b[N], cnt = <span class="number">0</span>;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line">ll f[N], g[N], c[N];</span><br><span class="line"><span class="type">int</span> re[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(ll *a, <span class="type">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    ll wn, w, t;</span><br><span class="line">    <span class="built_in">rep</span>(i, lim) re[i] = (i &amp; <span class="number">1</span>) * (lim &gt;&gt; <span class="number">1</span>) + (re[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, lim) <span class="keyword">if</span>(re[i] &lt; i) <span class="built_in">swap</span>(a[i], a[re[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> m = <span class="number">2</span>; m &lt;= lim; m *= <span class="number">2</span>) &#123;</span><br><span class="line">        k = m &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        wn = <span class="built_in">qpow</span>(<span class="number">3</span>, (mod - <span class="number">1</span>) / m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lim; i += m) &#123;</span><br><span class="line">            w = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">rep</span>(j, k) &#123;</span><br><span class="line">                t = a[i + j + k] * w % mod;</span><br><span class="line">                a[i + j + k] = (a[i + j] - t + mod) % mod;</span><br><span class="line">                a[i + j] = (a[i + j] + t) % mod;</span><br><span class="line">                w = w * wn % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">solve</span>(l, mid), <span class="built_in">solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> lim = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim &lt;= mid - l + <span class="number">1</span> || lim &lt;= r - mid) lim *= <span class="number">2</span>;</span><br><span class="line">    lim *= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, lim) f[i] = g[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, mid - l + <span class="number">1</span>) f[i] = c[l + i];</span><br><span class="line">    <span class="built_in">rep</span>(i, r - mid) g[i] = c[mid + <span class="number">1</span> + i] * (mid + <span class="number">1</span> + i);</span><br><span class="line">    <span class="built_in">NTT</span>(f, lim), <span class="built_in">NTT</span>(g, lim);</span><br><span class="line">    <span class="built_in">rep</span>(i, lim) f[i] = f[i] * g[i] % mod;</span><br><span class="line">    <span class="built_in">NTT</span>(f, lim);</span><br><span class="line">    <span class="type">int</span> inv = <span class="built_in">qpow</span>(lim, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, lim) f[i] = f[i] * inv % mod;</span><br><span class="line">    <span class="built_in">reverse</span>(f + <span class="number">1</span>, f + lim);</span><br><span class="line">    <span class="built_in">rep</span>(i, lim) ans = (ans + f[i] * <span class="built_in">qpow</span>(i + l + mid + <span class="number">1</span>, mod - <span class="number">2</span>)) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n) cin &gt;&gt; b[i], c[b[i]]++;</span><br><span class="line">    n = <span class="number">100000</span>;</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">1</span>, n);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-数字串"><a href="#7-数字串" class="headerlink" title="7. 数字串"></a>7. 数字串</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定一个 $n$ 位数 $s$，在其中添加<strong>恰好</strong> $k$ 个加号，使得结果最大。输出这个最大的结果。</p><p>如 <code>123</code> 添加一个加号后可变成 <code>1+23=24</code> 或 <code>12+3=15</code>。</p><p>$k &lt; n \le 10^6$</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>显然应该要保留尽可能多的位数在一起，所以结果应该是一个 $n-k$ 位数加上 $k$ 个一位数。</p><p>此时问题变成寻找最大的 $n-k$ 位数，可使用后缀数组解决。</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><p>其实就是SA模板。O3 优化后可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000006</span>;</span><br><span class="line"><span class="type">int</span> n, k, m = N;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> rk[N], rk2[N], sa[N], id[N], cnt[N];</span><br><span class="line"><span class="type">int</span> st;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; s;</span><br><span class="line">    s = <span class="string">&#x27;-&#x27;</span> + s;</span><br><span class="line">    <span class="built_in">repp</span>(i, n)cnt[rk[i] = s[i]]++;</span><br><span class="line">    <span class="built_in">repp</span>(i, m)cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n;i &gt; <span class="number">0</span>;i--)sa[cnt[rk[i]]--] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>;len &lt;= n;len *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(cnt, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">repp</span>(i, n)id[i] = sa[i];</span><br><span class="line">        <span class="built_in">repp</span>(i, n)cnt[rk[id[i] + len]]++;</span><br><span class="line">        <span class="built_in">repp</span>(i, m)cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n;i &gt; <span class="number">0</span>;i--)sa[cnt[rk[id[i] + len]]--] = id[i];</span><br><span class="line">        <span class="built_in">init</span>(cnt, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">repp</span>(i, n)id[i] = sa[i];</span><br><span class="line">        <span class="built_in">repp</span>(i, n)cnt[rk[id[i]]]++;</span><br><span class="line">        <span class="built_in">repp</span>(i, m)cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n;i &gt; <span class="number">0</span>;i--)sa[cnt[rk[id[i]]]--] = id[i];</span><br><span class="line">        <span class="built_in">memcpy</span>(rk2, rk, <span class="built_in">sizeof</span>(rk2));</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">repp</span>(i, n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rk2[sa[i]] == rk2[sa[i - <span class="number">1</span>]] &amp;&amp; rk2[sa[i] + len] == rk2[sa[i - <span class="number">1</span>] + len])rk[sa[i]] = now;</span><br><span class="line">            <span class="keyword">else</span> rk[sa[i]] = ++now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">repp</span>(i, n) <span class="keyword">if</span>(sa[i] &lt;= k + <span class="number">1</span>) st = sa[i];</span><br><span class="line">    <span class="built_in">repp</span>(i, n - k) ans[i] = s[st + i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">repp</span>(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; st || i &gt;= st + n - k) &#123;</span><br><span class="line">            <span class="type">int</span> x = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> p = n - k;</span><br><span class="line">            ans[p] += x;</span><br><span class="line">            <span class="keyword">while</span>(ans[p] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                ans[p] %= <span class="number">10</span>;</span><br><span class="line">                p--;</span><br><span class="line">                ans[p] ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans[<span class="number">0</span>]) cout &lt;&lt; ans[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">repp</span>(i, n - k) cout &lt;&lt; ans[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-除法游戏"><a href="#8-除法游戏" class="headerlink" title="8. 除法游戏"></a>8. 除法游戏</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>有 $n$ 堆石子，第 $i$ 堆有 $a_i$ 个。两人轮流操作，每次可以选择一堆石子（至少有 $2$ 个），然后平均分成若干堆。不能操作者判负。输出胜者为先手还是后手。</p><p>$n \le 5\cdot 10^4, a_i \le 10^{12}$</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>可以首先发现的是，如果有偶数堆石子数量相同，那么其中一方必然可以复制另一方的操作，因此这几堆对胜负没有任何影响，可以直接删去。</p><p>若一堆石子为奇数个，则操作后必然分成奇数堆，于是可以删去除一堆外的所有。因此对一个奇数堆进行操作，实质上是将它除以一个因子。</p><p>若一堆石子为偶数个，则可分两种情况：若分为偶数个石子堆，则可将它们直接删去；若分为奇数堆。则删去除一堆外所有。因此对一个奇数堆进行操作，实质上是将它除以一个奇因子，或将直接删除。</p><p>于是可以转化为一个 Nim 游戏。一个数的每个奇质因子就相当于一个石子，除以一个奇因子就相当于拿走若干个石子。对于偶数，由于可以把所有奇因子除完后再通过一次操作把它删除，所以要多算一个石子。</p><p>因此我们要统计出所有数对应的石子数（若有一个奇质因子的多次幂则算多个，$2$ 的多次幂只算一个）。若它们异或和为 $0$ 则后手胜，否则先手胜。</p><p>问题是 $a_i$ 有 $10^{12}$，如何统计质因子。方法是先用 $10^4$ 内所有质数试除，能分解就分解。这样过后 $a$ 若没有分解完，则剩下的质因子都 $&gt;10^4$，而 $a_i \le 10^12$，于是最多只剩两个质因子。此时若它是质数则只剩一个，否则就是剩两个。</p><p>指数检测用 Miller-Rabin 算法。然而网上的许多模板都无法通过这道题，包括我自己之前写的，或许是数据有意在卡？最后是<a href="https://www.luogu.com.cn/blog/luo1gu1zui1bang1/zhi-yin-shuo-fen-xie">这篇文章</a>中的代码顺利通过了这题，在此感谢作者。</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> tl = <span class="number">12</span>;</span><br><span class="line"><span class="type">const</span> ll p[] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll y, ll mod)</span> </span>&#123;</span><br><span class="line">    ll p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)p = (__int128)p * x % mod;</span><br><span class="line">        x = (__int128)x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MillerRabin</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; tl;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == p[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">        ll v = x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((v &amp; <span class="number">1</span>) == <span class="number">0</span>)v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        ll y = <span class="built_in">qpow</span>(p[i], v, x);</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">1</span>)ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (v &lt; x - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y == x - <span class="number">1</span>) &#123;</span><br><span class="line">                    ok = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                y = (__int128) y * y % x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ok)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">ll a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    forr(i, <span class="number">2</span>, <span class="number">10000</span>) <span class="keyword">if</span> (<span class="built_in">MillerRabin</span>(i)) v.<span class="built_in">pb</span>(i);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p : v) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a % p == <span class="number">0</span>) &#123;</span><br><span class="line">                t++, a /= p;</span><br><span class="line">                <span class="keyword">while</span>(a % p == <span class="number">0</span>) a /= p, t += (p &gt; <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">1</span>) t += <span class="number">2</span> - <span class="built_in">MillerRabin</span>(a);</span><br><span class="line">        ans ^= t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans) cout &lt;&lt; <span class="string">&quot;Xiaodu&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Duduxiong&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-流水线搭积木"><a href="#4-流水线搭积木" class="headerlink" title="4. 流水线搭积木"></a>4. 流水线搭积木</h1><p>貌似是平衡树，以后有空补。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;打得是第一场，赛时只做出了5题，rk50几，感觉不太行。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.matiji.net/exam/ojquestionlist?questionBankId=179CE77A7B772D15A8C00DD8198AAC74&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="比赛笔记" scheme="http://rushroom.top/categories/%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="百度之星" scheme="http://rushroom.top/tags/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>CF1617E Christmas Chocolates</title>
    <link href="http://rushroom.top/CF1617E-Christmas-Chocolates/"/>
    <id>http://rushroom.top/CF1617E-Christmas-Chocolates/</id>
    <published>2023-03-26T14:25:33.047Z</published>
    <updated>2023-03-26T14:40:40.566Z</updated>
    
    <content type="html"><![CDATA[<p>「2023zimpha」树的直径练习题</p><p><a href="https://codeforces.com/contest/1617/problem/E">题目传送门</a></p><span id="more"></span><blockquote><p>有 $n$ 个互不相同的数 $a_1,a_2,\dots,a_n$。</p><p>每次操作，选定一个数 $a_i$ 和一个非负整数 $k$ 满足 $2^k \le a_i$，然后将 $a_i$ 替换为 $2^k-a_i$。</p><p>定义 $dis(a_i,a_j)$ 为最少需要的操作次数，使得 $a_i&#x3D;a_j$（每次操作只能对 $a_i$ 使用）。</p><p>选出一对 $a_i,a_j$ 使 $dis(a_i,a_j)$ 最大。</p><p>$n \le 2\cdot 10^5, a_i \le 10^9$</p></blockquote><p>在可以通过一次操作互相转化的两个数之间连一条边。</p><p>可以发现，这样建出来的图一定是一棵树（每个数都只能转化到唯一一个比自己小的数）。这棵树的根节点为 0。</p><p>原问题转化为：求在树上距离最大的一组 $a_i,a_j$。</p><p>用树的直径求法，先找到距离 $a_1$ 最远的点 $a_u$，再找到距离 $a_u$ 最远的点 $a_v$。那么 $a_u,a_v$​ 即为答案。</p><p>因为每次操作大概是除以二，所以点的深度是 log 级别。求距离可以用暴力跳，单次复杂度 log。</p><p>总复杂度 $O(n \log n)$。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, a[N];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; num;</span><br><span class="line"><span class="type">int</span> cnt, fa[<span class="number">32</span> * N], dep[<span class="number">32</span> * N], zero;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x != y) &#123;</span><br><span class="line"><span class="keyword">if</span>(dep[x] &gt;= dep[y]) x = fa[x];</span><br><span class="line"><span class="keyword">else</span> y = fa[y];</span><br><span class="line">d++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> u = <span class="number">1</span>, v = <span class="number">1</span>;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">    num[a[i]] = i + <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">cnt = n;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">s.<span class="built_in">insert</span>(x);</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y &lt; x) y *= <span class="number">2</span>;</span><br><span class="line">y = y - x;</span><br><span class="line"><span class="keyword">if</span>(!num[y]) &#123;</span><br><span class="line">num[y] = ++cnt;</span><br><span class="line">q.<span class="built_in">push</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">fa[num[x]] = num[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i: s) <span class="keyword">if</span>(i) dep[num[i]] = dep[fa[num[i]]] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">repp</span>(i, n) <span class="keyword">if</span>(<span class="built_in">dis</span>(<span class="number">1</span>, i) &gt; <span class="built_in">dis</span>(<span class="number">1</span>, u)) u = i;</span><br><span class="line"><span class="built_in">repp</span>(i, n) <span class="keyword">if</span>(<span class="built_in">dis</span>(u, i) &gt; <span class="built_in">dis</span>(u, v)) v = i;</span><br><span class="line"><span class="keyword">if</span>(u &gt; v) <span class="built_in">swap</span>(u, v);</span><br><span class="line">cout &lt;&lt; u &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; v &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">dis</span>(u, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;「2023zimpha」树的直径练习题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1617/problem/E&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="树" scheme="http://rushroom.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1672E notepad.exe</title>
    <link href="http://rushroom.top/CF1672E-notepad-exe/"/>
    <id>http://rushroom.top/CF1672E-notepad-exe/</id>
    <published>2023-03-24T12:27:09.636Z</published>
    <updated>2023-03-24T15:14:48.568Z</updated>
    
    <content type="html"><![CDATA[<p>「2023zimpha」二分练习题</p><p><a href="https://codeforces.com/contest/1672/problem/E">题目传送门</a></p><span id="more"></span><blockquote><p>交互题。</p><p>文本编辑器中有 $n$ 个单词，第 $i$ 个长度为 $l_i$。$l$ 仅对测评机可见。</p><p>文本编辑器一行一行展示文本，以空格分开相邻的两个单词，但是行末不一定有空格，即单词可以直接作为某一行的末尾。对于给定的屏幕宽度 $w$，高度 $h$ 为展示文本最少需要的行数。</p><p>如果 $w \le \max(l_i)$，那么文本编辑器将崩溃， $h &#x3D; 0$ .</p><p>最多可以询问 $n + 30$ 次。每次询问宽度 $w$ 。测评机将返回 $h$。</p><p>输出最小面积，即 $min(w\times h_w)$。</p><p>$n,l_i \le 2000$</p></blockquote><p>良题。</p><p>看到 $n+30$，可以猜到询问是二分+ $O(n)$ 枚举。</p><p>先二分出最小的 $w&#x3D;w_1$ 满足 $h&#x3D;1$，即把所有单词放在一行的长度。</p><p>此时如果有更优的 $h$，最小宽度为 $w_h$，那么一定有 $w_h \le \left\lfloor \dfrac{w_1}{h}\right \rfloor$。</p><p>对比 $h$ 行与 $1$ 行两种方案，考虑最优的情况，$h$ 行每行末尾都没有空格，那么就在 $1\sim h-1$ 行的末尾各省下了一个空格，共 $h-1$ 个，所以又有 $w_h\cdot h \ge w_1-h+1$，进一步，$w_h \ge \dfrac{w1-h+1}{h} \ge \left\lfloor \dfrac{w_1}{h}\right \rfloor$。</p><p>所以可以得到 $w_h&#x3D;\left\lfloor \dfrac{w_1}{h}\right \rfloor$。</p><p>接下来，我们就可以枚举 $2 \le h \le n$，然后对 $w&#x3D;\left\lfloor \dfrac{w_1}{h}\right \rfloor$ 询问，用 $w\cdot h’$ 更新答案（$h’$ 为测评机返回的数）。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ll n, w, a, ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    ll l = <span class="number">1</span>, r = <span class="number">2000</span> * <span class="number">3000</span>, mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; mid &lt;&lt; endl;</span><br><span class="line">        cout.<span class="built_in">flush</span>();</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>)w = mid, r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = w;</span><br><span class="line">    <span class="built_in">repp</span>(i, n) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; w / i &lt;&lt; endl;</span><br><span class="line">        cout.<span class="built_in">flush</span>();</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        <span class="keyword">if</span> (a)ans = <span class="built_in">min</span>(ans, w / i * a);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;「2023zimpha」二分练习题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1672/problem/E&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Codeforces" scheme="http://rushroom.top/tags/Codeforces/"/>
    
    <category term="二分" scheme="http://rushroom.top/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>ABC285G Tatami</title>
    <link href="http://rushroom.top/ABC285G-Tatami/"/>
    <id>http://rushroom.top/ABC285G-Tatami/</id>
    <published>2023-03-24T11:55:14.738Z</published>
    <updated>2023-03-24T12:26:34.654Z</updated>
    
    <content type="html"><![CDATA[<p>AC 的第一道上下界网络流。</p><p><a href="https://atcoder.jp/contests/abc285/tasks/abc285_g">题目传送门</a></p><span id="more"></span><blockquote><p>用若干个 $1 \times 1$ 和 $1 \times 2$ 的瓷砖（可以旋转）不重叠地完全覆盖 $H \times W$ 的长方形网格。第 $i$ 行第 $j$ 列的网格有限制 $c_{i,j}$，含义如下：</p><ul><li><code>1</code>：该网格只能用 $1 \times 1$ 的瓷砖覆盖。</li><li><code>2</code>：该网格只能用 $1 \times 2$ 的瓷砖覆盖。</li><li><code>?</code>：无限制。</li></ul><p>判断是否可行。</p><p>$H,W \le 300$</p></blockquote><p>因为有 $1\times 1$ 的瓷砖比较自由，所以我们只需要考虑满足所有限制为 2 的格子就行了。</p><p>显然，按照 $i+j$ 的奇偶性可以将网格分成一个二分图。</p><p>对于两个相邻且可以用一个 $1\times 2$ 覆盖的格子（即都不是 1），连一条 $[0,1]$ 的边。</p><p>接着考虑每个点的流量限制：</p><ul><li>对于 1，没有流量，不用连边。</li><li>对于 2，必须要用 $1\times 2$ 覆盖，向超级源点&#x2F;汇点连一条 $[1,1]$ 的边。</li><li>对于 ?，可以用 $1\times 2$ 覆盖，也可以不用，向超级源点&#x2F;汇点连一条 $[0,1]$ 的边。</li></ul><p>然后用有源汇上下界可行流求解。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">string s[N];</span><br><span class="line"><span class="type">char</span> c[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - <span class="number">1</span>) * m + y - <span class="number">1</span>; &#125;</span><br><span class="line"><span class="type">int</span> S, T, S2, T2;</span><br><span class="line"><span class="type">int</span> in[N * N], out[N * N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> w[<span class="number">20</span> * N * N], to[<span class="number">20</span> * N * N], dep[<span class="number">20</span> * N * N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;g[N * N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; &#x27; &#x27; &lt;&lt; v &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (!v)<span class="keyword">return</span>;</span><br><span class="line">    ++cnt;</span><br><span class="line">    w[cnt] = v, to[cnt] = y;</span><br><span class="line">    g[x].<span class="built_in">pb</span>(cnt);</span><br><span class="line">    ++cnt;</span><br><span class="line">    w[cnt] = <span class="number">0</span>, to[cnt] = x;</span><br><span class="line">    g[y].<span class="built_in">pb</span>(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; &#x27; &#x27; &lt;&lt; l &lt;&lt; &#x27;,&#x27; &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">    in[y] += l, out[x] += l;</span><br><span class="line">    <span class="built_in">addedge2</span>(x, y, r - l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>(dep, <span class="number">0</span>);</span><br><span class="line">    dep[S2] = <span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(S2);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y : g[x])</span><br><span class="line">            <span class="keyword">if</span> (w[y] &amp;&amp; !dep[to[y]]) &#123;</span><br><span class="line">                dep[to[y]] = dep[x] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(to[y]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (dep[T2] != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> mn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == T2)</span><br><span class="line">        <span class="keyword">return</span> mn;</span><br><span class="line">    <span class="type">int</span> tmp = mn;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[to[y]] != dep[x] + <span class="number">1</span> || !w[y])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> v = <span class="built_in">dfs</span>(to[y], <span class="built_in">min</span>(mn, w[y]));</span><br><span class="line">        w[y] -= v;</span><br><span class="line">        <span class="keyword">if</span> (y % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            w[y + <span class="number">1</span>] += v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            w[y - <span class="number">1</span>] += v;</span><br><span class="line">        mn -= v;</span><br><span class="line">        <span class="keyword">if</span> (!mn)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp == mn)</span><br><span class="line">        dep[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp - mn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    S = n * m, T = S + <span class="number">1</span>, S2 = T + <span class="number">1</span>, T2 = S2 + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">addedge</span>(T, S, <span class="number">0</span>, MAXN);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; s[i];</span><br><span class="line">    <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, m)c[i][j] = s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, m) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i + j) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i][j] == <span class="string">&#x27;2&#x27;</span>)<span class="built_in">addedge</span>(S, <span class="built_in">id</span>(i, j), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (c[i][j] == <span class="string">&#x27;?&#x27;</span>)<span class="built_in">addedge</span>(S, <span class="built_in">id</span>(i, j), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i][j] == <span class="string">&#x27;2&#x27;</span>)<span class="built_in">addedge</span>(<span class="built_in">id</span>(i, j), T, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (c[i][j] == <span class="string">&#x27;?&#x27;</span>)<span class="built_in">addedge</span>(<span class="built_in">id</span>(i, j), T, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i][j] == <span class="string">&#x27;1&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">rep</span>(k, <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x = i + k, y = j + <span class="number">1</span> - k;</span><br><span class="line">            <span class="keyword">if</span> (c[x][y] == <span class="string">&#x27;2&#x27;</span> || c[x][y] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i + j) % <span class="number">2</span> == <span class="number">0</span>)<span class="built_in">addedge</span>(<span class="built_in">id</span>(i, j), <span class="built_in">id</span>(x, y), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">addedge</span>(<span class="built_in">id</span>(x, y), <span class="built_in">id</span>(i, j), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, T + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in[i] &gt; out[i])<span class="built_in">addedge2</span>(S2, i, in[i] - out[i]), sum += in[i] - out[i];</span><br><span class="line">        <span class="keyword">if</span> (in[i] &lt; out[i])<span class="built_in">addedge2</span>(i, T2, out[i] - in[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())sum -= <span class="built_in">dfs</span>(S2, MAXN);</span><br><span class="line">    <span class="keyword">if</span> (!sum)cout &lt;&lt; <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;AC 的第一道上下界网络流。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/abc285/tasks/abc285_g&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="AtCoder" scheme="http://rushroom.top/tags/AtCoder/"/>
    
    <category term="网络流" scheme="http://rushroom.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>USACO2018FEB P New Barns</title>
    <link href="http://rushroom.top/USACO2018FEB-P-New-Barns/"/>
    <id>http://rushroom.top/USACO2018FEB-P-New-Barns/</id>
    <published>2023-03-24T11:34:45.527Z</published>
    <updated>2023-03-24T12:09:32.908Z</updated>
    
    <content type="html"><![CDATA[<p>「2023zimpha」树的直径练习题</p><p><a href="https://www.luogu.com.cn/problem/P4271">题目传送门</a></p><span id="more"></span><blockquote><p>有一棵树，初始没有节点。有 $q$ 次操作，操作分两种：</p><ol><li>新建一个节点，将它与 $p$ 节点连接。（若 $p&#x3D;-1$，则不与其它节点相连 ）</li><li>查询在 $k$ 节点所在的连通块中，距它最远的点的距离。</li></ol><p>$q \le 10^5$。</p></blockquote><p>树的直径入门题目。</p><p>经典结论：树中距离一个节点最远的点一定是直径的两个端点之一。证明见 <a href="https://oi-wiki.org/graph/tree-diameter/#%E5%81%9A%E6%B3%95-1-%E4%B8%A4%E6%AC%A1-dfs">OI Wiki</a>。</p><p>于是我们只需要维护树的直径，先把所有操作离线下来，建出最终的树，倍增求 LCA。新加节点时用两个直径端点到它的距离更新直径即可。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> q, n = <span class="number">0</span>, p[N], fa[N][<span class="number">20</span>], dep[N];</span><br><span class="line"><span class="type">char</span> op[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[x] &lt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="type">int</span> X = x, Y = y;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (fa[X][i] != <span class="number">-1</span> &amp;&amp; dep[fa[X][i]] &gt;= dep[Y]) &#123;</span><br><span class="line">X = fa[X][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (X == Y) <span class="keyword">return</span> dep[x] - dep[X];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (fa[X][i] != <span class="number">-1</span> &amp;&amp; fa[Y][i] != <span class="number">-1</span> &amp;&amp; fa[X][i] != fa[Y][i]) &#123;</span><br><span class="line">X = fa[X][i];</span><br><span class="line">Y = fa[Y][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[x] - dep[X] + dep[y] - dep[Y] + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rt[N], d[N][<span class="number">2</span>], cnt = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; q;</span><br><span class="line"><span class="built_in">rep</span>(i, q) &#123;</span><br><span class="line">cin &gt;&gt; op[i] &gt;&gt; p[i];</span><br><span class="line"><span class="keyword">if</span> (p[i] != <span class="number">-1</span>) p[i]--;</span><br><span class="line"><span class="keyword">if</span> (op[i] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[i] != <span class="number">-1</span>) dep[n] = dep[p[i]] + <span class="number">1</span>, rt[n] = rt[p[i]];</span><br><span class="line"><span class="keyword">else</span> rt[n] = n;</span><br><span class="line">fa[n++][<span class="number">0</span>] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">repp</span>(i, <span class="number">19</span>) &#123;</span><br><span class="line"><span class="built_in">rep</span>(j, n) &#123;</span><br><span class="line"><span class="keyword">if</span> (fa[j][i - <span class="number">1</span>] == <span class="number">-1</span>) fa[j][i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> fa[j][i] = fa[fa[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i, q) &#123;</span><br><span class="line"><span class="keyword">if</span> (op[i] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">if</span> (p[i] ==  <span class="number">-1</span>) d[cnt][<span class="number">0</span>] = d[cnt][<span class="number">1</span>] = cnt;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> x = d[rt[p[i]]][<span class="number">0</span>], y = d[rt[p[i]]][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dis</span>(x, cnt) &gt; <span class="built_in">dis</span>(d[rt[p[i]]][<span class="number">0</span>], d[rt[p[i]]][<span class="number">1</span>])) &#123;</span><br><span class="line">d[rt[p[i]]][<span class="number">0</span>] = x;</span><br><span class="line">d[rt[p[i]]][<span class="number">1</span>] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dis</span>(y, cnt) &gt; <span class="built_in">dis</span>(d[rt[p[i]]][<span class="number">0</span>], d[rt[p[i]]][<span class="number">1</span>])) &#123;</span><br><span class="line">d[rt[p[i]]][<span class="number">0</span>] = y;</span><br><span class="line">d[rt[p[i]]][<span class="number">1</span>] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> x = d[rt[p[i]]][<span class="number">0</span>], y = d[rt[p[i]]][<span class="number">1</span>];</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(<span class="built_in">dis</span>(x, p[i]), <span class="built_in">dis</span>(y, p[i])) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;「2023zimpha」树的直径练习题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4271&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="树" scheme="http://rushroom.top/tags/%E6%A0%91/"/>
    
    <category term="USACO" scheme="http://rushroom.top/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>CF455C Civilization</title>
    <link href="http://rushroom.top/CF455C-Civilization/"/>
    <id>http://rushroom.top/CF455C-Civilization/</id>
    <published>2023-03-24T09:26:04.071Z</published>
    <updated>2023-03-24T10:26:22.097Z</updated>
    
    <content type="html"><![CDATA[<p>「2023zimpha」树的直径练习题</p><p><a href="https://codeforces.com/contest/455/problem/C">题目传送门</a></p><span id="more"></span><blockquote><p>给出一个有 $n$ 个点，$m$ 条边的森林，有 $q$ 次操作。操作有两种：</p><ol><li>查询点 $x$ 所在树的直径</li><li>要求添加一条边，合并点 $x$ 和 $y$ 所在的两棵树，使合并后树的直径最小。（如果 $x$ 和 $y$ 在同一棵树中则不用操作）</li></ol><p>$n,m,q \le 3\cdot 10^5$</p></blockquote><p>设添加的边的两个端点为 $u,v$，两棵树直径分别为 $d_1,d_2$。</p><p>使合并后树的直径最小，也就是使经过 $u,v$ 的最长路径最短，这条路径的长度为 $dis(u,u’)+dis(v,v’)+1$，其中 $u’,v’$ 分别是合并前两棵树中的点。</p><p>考虑最小化 $dis(u,u’)$，那么就是要在找到一个 $u$，使得它到树中其他点距离的最大值最小。</p><p>这里有一个经典结论，从一个点到树中其他的最长路径，另一端点一定是这棵树直径的一个端点。所以我们选的 $u$ 一定是直径的中点（若直径为奇数则中间两个点任取一个）。因此 $\max(dis(u,u’))&#x3D;\left\lceil\dfrac{d_1}{2}\right\rceil$。</p><p>所以，合并后树的最小直径就是 $\max\left(d1,d2,\left\lceil\dfrac{d_1}{2}\right\rceil+\left\lceil\dfrac{d_2}{2}\right\rceil\right)$。</p><p>用并查集合并即可。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, q, op, u, v;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[i] == i) <span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[i] = <span class="built_in">Find</span>(fa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mx, id;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt; mx) mx = cnt, id = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y: g[x]) &#123;</span><br><span class="line"><span class="keyword">if</span>(y == f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(y, x, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">div2</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">return</span> (x - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"><span class="built_in">rep</span>(i, n) fa[i] = i;</span><br><span class="line"><span class="built_in">rep</span>(i, m) &#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">u--, v--;</span><br><span class="line">g[u].<span class="built_in">pb</span>(v), g[v].<span class="built_in">pb</span>(u);</span><br><span class="line">fa[<span class="built_in">Find</span>(u)] = <span class="built_in">Find</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">rep</span>(i, n) <span class="keyword">if</span>(d[<span class="built_in">Find</span>(i)] == <span class="number">-1</span>) &#123;</span><br><span class="line">mx = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">mx = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(id, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">d[<span class="built_in">Find</span>(i)] = mx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">cin &gt;&gt; u;</span><br><span class="line">u--;</span><br><span class="line">cout &lt;&lt; d[<span class="built_in">Find</span>(u)] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">u--, v--;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Find</span>(u) == <span class="built_in">Find</span>(v)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">d[<span class="built_in">Find</span>(v)] = <span class="built_in">max</span>(<span class="built_in">max</span>(d[<span class="built_in">Find</span>(u)], d[<span class="built_in">Find</span>(v)]), <span class="built_in">div2</span>(d[<span class="built_in">Find</span>(u)]) + <span class="built_in">div2</span>(d[<span class="built_in">Find</span>(v)]) + <span class="number">1</span>);</span><br><span class="line">fa[<span class="built_in">Find</span>(u)] = <span class="built_in">Find</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;「2023zimpha」树的直径练习题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/455/problem/C&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="树" scheme="http://rushroom.top/tags/%E6%A0%91/"/>
    
    <category term="Codeforces" scheme="http://rushroom.top/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>2023求真书院Pi节挑战赛试题及参考答案</title>
    <link href="http://rushroom.top/2023%E6%B1%82%E7%9C%9F%E4%B9%A6%E9%99%A2Pi%E8%8A%82%E6%8C%91%E6%88%98%E8%B5%9B%E8%AF%95%E9%A2%98%E5%8F%8A%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/"/>
    <id>http://rushroom.top/2023%E6%B1%82%E7%9C%9F%E4%B9%A6%E9%99%A2Pi%E8%8A%82%E6%8C%91%E6%88%98%E8%B5%9B%E8%AF%95%E9%A2%98%E5%8F%8A%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/</id>
    <published>2023-03-11T05:16:25.040Z</published>
    <updated>2023-03-16T13:32:49.055Z</updated>
    
    <content type="html"><![CDATA[<p>QwQ</p><span id="more"></span><div class="row">    <embed src="/problem.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="/sol.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;QwQ&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="http://rushroom.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Pi节" scheme="http://rushroom.top/tags/Pi%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>ARC155比赛笔记</title>
    <link href="http://rushroom.top/ARC155%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    <id>http://rushroom.top/ARC155%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-29T13:47:37.909Z</published>
    <updated>2023-03-24T12:07:46.959Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/arc155">比赛传送门</a></p><p>发现自己的恶性循环：自闭打unr-&gt;打的挺好-&gt;自信满满打rated-&gt;掉分-&gt;自闭打unr</p><span id="more"></span><h1 id="A-ST-and-TS-Palindrome"><a href="#A-ST-and-TS-Palindrome" class="headerlink" title="A - ST and TS Palindrome"></a>A - ST and TS Palindrome</h1><blockquote><p>给定长度为 $n$ 的字符串 $S$ 和一个数 $k$，问是否存在一个长度为 $k$ 的字符串 $T$ 满足字符串 $S+T$ 和 $T+S$ 都是回文串。<br>$n \le 2\cdot 10^5,k \le 10^{18}$</p></blockquote><p>Tag: 字符串</p><p>设 $S$ 倒转后得到 $S’$。</p><p>考虑如果 $k&gt;2n$，那么  $S’$ 必定是 $T$ 的前缀和后缀，设 $T&#x3D;S’+t+S’$。</p><p>所以可以得到 $S+S’+t+S’$ 和 $S’+t+S’+S$ 都是回文串，进而得到 $S’+t$ 和 $t+S’$ 都是回文串。</p><p>简单分析可知，“$S’+t$ 和 $t+S’$ 都是回文串”与“ $S+t$ 和 $t+S$ 都是回文串”是等价的，所以整个转化过程就相当于把 $k$  缩小了 $2n$。</p><p>这样一直转化下去，最后相当于把 $k$ 模上 $2n$。</p><p>之后分成 $k&#x3D;0,1\le k \le n$ 和 $n+1\le j \le 2n-1$ 讨论，具体过程比较简单，这里就不赘述了。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ll n, k;</span><br><span class="line">string s, t;</span><br><span class="line"><span class="type">bool</span> ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(string st)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i, st.<span class="built_in">size</span>())<span class="keyword">if</span> (st[i] != st[st.<span class="built_in">size</span>() - <span class="number">1</span> - i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; s;</span><br><span class="line">    k %= <span class="number">2</span> * n;</span><br><span class="line">    <span class="keyword">if</span> (!k)ans = <span class="built_in">check</span>(s);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= n) &#123;</span><br><span class="line">        t = s.<span class="built_in">substr</span>(<span class="number">0</span>, k);</span><br><span class="line">        <span class="built_in">reverse</span>(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">        ans = <span class="built_in">check</span>(s + t) &amp; <span class="built_in">check</span>(t + s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, k)t += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, n)t[i] = s[n - <span class="number">1</span> - i];</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[k - <span class="number">1</span> - i] != <span class="string">&#x27;1&#x27;</span> &amp;&amp; t[k - <span class="number">1</span> - i] != s[i])ans = <span class="number">0</span>;</span><br><span class="line">            t[k - <span class="number">1</span> - i] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans)ans = <span class="built_in">check</span>(s + t) &amp; <span class="built_in">check</span>(t + s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans)cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Abs-Abs-Function"><a href="#B-Abs-Abs-Function" class="headerlink" title="B - Abs Abs Function"></a>B - Abs Abs Function</h1><blockquote><p>有一个非负整数对的集合 $T$，初始时 $T&#x3D;{A,B}$。每次操作，要么向 $T$ 中加入一个元素，要么给定区间 $[l,r]$，查询 $\min\limits_{x\in [l,r],(a,b)\in T} \lvert\lvert x-a \rvert -b \rvert$。<br>$q \le 2\cdot 10^5,A,B,l,r \le 10^9$</p></blockquote><p>Tag: 数学</p><p>查询的东西函数图像画出来是一个 W。其实可以转化成 $\min{\lvert a+b-x\rvert,\lvert a-b-x\rvert}$。刚好它要求的也是 min，所以就拆成两个数 $a+b$ 和  $a-b$，查询改为 $\min\limits_{x\in [l,r],y\in T} \lvert x-y\rvert$。<br>这个东西用 set 维护一下就行了。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ll q, t, a, b;</span><br><span class="line">set&lt;ll&gt;s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; q &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    s.<span class="built_in">insert</span>(a + b), s.<span class="built_in">insert</span>(a - b);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; t &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>)s.<span class="built_in">insert</span>(a + b), s.<span class="built_in">insert</span>(a - b);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = s.<span class="built_in">lower_bound</span>(a);</span><br><span class="line">            ll ans = MAXN;</span><br><span class="line">            <span class="keyword">if</span> (p != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> x = *p;</span><br><span class="line">                <span class="keyword">if</span> (x &lt;= b)ans = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> ans = x - b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p != s.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">                p--;</span><br><span class="line">                <span class="type">int</span> x = *p;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, a - x);</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/arc155&quot;&gt;比赛传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现自己的恶性循环：自闭打unr-&amp;gt;打的挺好-&amp;gt;自信满满打rated-&amp;gt;掉分-&amp;gt;自闭打unr&lt;/p&gt;</summary>
    
    
    
    <category term="比赛笔记" scheme="http://rushroom.top/categories/%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="AtCoder" scheme="http://rushroom.top/tags/AtCoder/"/>
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="字符串" scheme="http://rushroom.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>USACO2023JAN G 比赛笔记</title>
    <link href="http://rushroom.top/USACO2023JAN-G-%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    <id>http://rushroom.top/USACO2023JAN-G-%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-28T14:45:49.456Z</published>
    <updated>2023-03-24T11:35:23.047Z</updated>
    
    <content type="html"><![CDATA[<p>打得还行，希望能晋级P。</p><span id="more"></span><h1 id="T1-Find-and-Replace"><a href="#T1-Find-and-Replace" class="headerlink" title="T1. Find and Replace"></a>T1. Find and Replace</h1><blockquote><p>有一个字符串 $S$，初始为单个字符 <code>a</code>。有 $n$ 次操作，每次给定字符 $c$ 和字符串 $s$，将 $S$ 中所有 $c$ 替换为 $s$。操作结束后给定 $l,r$，询问  $S_{l\dots r}$。<br>$\sum \lvert s \rvert \le 2\cdot 10^5,r-l+1\le 2\cdot 10^5$</p></blockquote><p>Tag: 搜索</p><p>设 $f_{i,j}$ 表示字符 $i$ 经过操作 $j,j+1\dots n$ 后会变为多少个字符。则可以根据 $f$ 的值 DFS（类似线段树查询，一层层拆分区间，$f$ 的值即为区间大小）。</p><p>这样会遇到一个问题：如果存在大量 $\lvert s \rvert &#x3D;1$，即一个字符变为一个字符，那么 DFS 中操作次数可能达到 $O(n^2)$ 次。对此，可以预处理出字符 $i$ 在操作 $j$ 后第一个 $\lvert s \rvert &gt;1$ 的操作 $nxt_{i,j}$，以及在操作 $nxt_{i,j}$ 时字符 $i$ 变成了字符 $to_{i,j}$。这样可以快速跳转至下一个增加 $S$ 长度的操作。</p><p>由于每次有效操作都会将 $S$ 长度至少+1，而 $r-l+1\le 2\cdot 10^5$，所以需要处理的操作也不会超过这个数。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c[N];</span><br><span class="line">string s[N];</span><br><span class="line">ll dp[<span class="number">26</span>][N], nxt[<span class="number">26</span>][N], to[<span class="number">26</span>][N];</span><br><span class="line">ll L, R, n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x, ll d, ll p, ll l, ll r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; d &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (d == n) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">char</span>(<span class="string">&#x27;a&#x27;</span> + x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, s[d].<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> y = s[d][i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        ll w = dp[y][d + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= r &amp;&amp; p + w - <span class="number">1</span> &gt;= l)<span class="built_in">dfs</span>(to[y][d + <span class="number">1</span>], nxt[y][d + <span class="number">1</span>], p, <span class="built_in">max</span>(p, l), <span class="built_in">min</span>(p + w - <span class="number">1</span>, r));</span><br><span class="line">        p += w;</span><br><span class="line">        <span class="keyword">if</span> (p &gt; r)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; L &gt;&gt; R &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; c[i] &gt;&gt; s[i];</span><br><span class="line">    <span class="built_in">rep</span>(i, <span class="number">26</span>)dp[i][n] = <span class="number">1</span>, nxt[i][n] = n, to[i][n] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>;j &gt;= <span class="number">0</span>;--j) <span class="built_in">rep</span>(i, <span class="number">26</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[j] - <span class="string">&#x27;a&#x27;</span> != i) &#123;</span><br><span class="line">            dp[i][j] = dp[i][j + <span class="number">1</span>];</span><br><span class="line">            nxt[i][j] = nxt[i][j + <span class="number">1</span>];</span><br><span class="line">            to[i][j] = to[i][j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[j].<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[i][j] = dp[s[j][<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>][j + <span class="number">1</span>];</span><br><span class="line">            nxt[i][j] = nxt[s[j][<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>][j + <span class="number">1</span>];</span><br><span class="line">            to[i][j] = to[s[j][<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>][j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = <span class="number">0</span>, nxt[i][j] = j, to[i][j] = i;</span><br><span class="line">            <span class="built_in">rep</span>(k, s[j].<span class="built_in">size</span>()) &#123;</span><br><span class="line">                dp[i][j] += dp[s[j][k] - <span class="string">&#x27;a&#x27;</span>][j + <span class="number">1</span>];</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], (ll)MAXN * MAXN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, L, R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T2-Lights-Off"><a href="#T2-Lights-Off" class="headerlink" title="T2. Lights Off"></a>T2. Lights Off</h1><p>Tag: 数学</p><blockquote><p>有两个二进制数 $a,b$，每次操作，先将 $b$ 的一位取反，然后将 $a$ 异或上 $b$，最后将 $b$ 在二进制下循环右移一位。问至少几次操作让 $a&#x3D;0$。<br>多测，数据组数 $\le 2\cdot 10^5$，所有测试点中 $a,b$ 在二进制下位数相同且 $\le 20$。</p></blockquote><p>考虑将一位反转会对结果造成什么影响，发现一定是异或上连续的一串1，而由于每次操作内只能反转一次，所以每种长度的一串1有且仅有一个。于是可以预处理一个背包 $f_{i,j}$ 表示长度为 $1\dots i$ 的串异或起来能否得到 $j$。询问时枚举答案即可。</p><p>不太清楚是怎么证明答案 $\le n$ 的。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> T_ = <span class="number">1</span>, case_;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> dp[<span class="number">21</span>][<span class="number">1</span> &lt;&lt; <span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">shift</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y = x % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> y * (<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)) + x / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">string s, t;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    a = b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)a = a * <span class="number">2</span> + s[i] - <span class="string">&#x27;0&#x27;</span>, b = b * <span class="number">2</span> + t[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][(a ^ now)]) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        now = <span class="built_in">shift</span>(now) ^ b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0), cout.tie(0);</span></span><br><span class="line">    cin &gt;&gt; T_ &gt;&gt; n;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p[<span class="number">21</span>];</span><br><span class="line">    <span class="built_in">init</span>(p, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(j, n)p[j] = <span class="built_in">shift</span>(p[j]) ^ (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">        <span class="built_in">rep</span>(msk, (<span class="number">1</span> &lt;&lt; n)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dp[i][msk])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">rep</span>(j, n)dp[i + <span class="number">1</span>][(msk ^ p[j])] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (case_ = <span class="number">1</span>; case_ &lt;= T_; case_++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T3-Moo-Rute"><a href="#T3-Moo-Rute" class="headerlink" title="T3. Moo Rute"></a>T3. Moo Rute</h1><blockquote><p>一条长度为 $n+1$  的链，节点标号为 $0 \dots n$。从 0 开始走，每步向左或向右一个节点。已知每条边的经过次数 $a_i$，求在掉头次数最少的前提下，有多少种方案。<br>$n \le 10^5,a_i \le 10^6$</p></blockquote><p>只写了个 $n&#x3D;2$ 的部分分，组合数随便搞搞。</p><p>正解不知道怎么做。</p><p><strong>UPD 2023&#x2F;3&#x2F;24：晋级了</strong></p><p>先只考虑 $n&#x3D;2$ 时的情况：</p><ul><li>若 $a_1&gt;a_2$，答案为 $\dbinom{a_1&#x2F;2}{a_2&#x2F;2}$</li><li>若 $a_1 \le a_2$，答案为 $\dbinom{a_2&#x2F;2-1}{a_1&#x2F;2-1}$</li></ul><p>稍加思考可以知道，$n$ 更大的情况其实就相当于若干个 $n&#x3D;2$ 连起来，相乘即可。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ll n, a[<span class="number">100005</span>], ans = <span class="number">1</span>;</span><br><span class="line">ll f[<span class="number">1000006</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)p = p * x % mod;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] * <span class="built_in">qpow</span>(f[y], mod - <span class="number">2</span>) % mod * <span class="built_in">qpow</span>(f[x - y], mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Solve</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)<span class="keyword">return</span> <span class="built_in">C</span>(a / <span class="number">2</span>, b / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">C</span>(b / <span class="number">2</span> - <span class="number">1</span>, a / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; a[i];</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">repp</span>(i, <span class="number">1000000</span>)f[i] = f[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    <span class="built_in">rep</span>(i, n - <span class="number">1</span>)ans = ans * <span class="built_in">Solve</span>(a[i], a[i + <span class="number">1</span>]) % mod;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;打得还行，希望能晋级P。&lt;/p&gt;</summary>
    
    
    
    <category term="比赛笔记" scheme="http://rushroom.top/categories/%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="USACO" scheme="http://rushroom.top/tags/USACO/"/>
    
    <category term="搜索" scheme="http://rushroom.top/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>SPOJ BTCODE_A - Traversing Grid</title>
    <link href="http://rushroom.top/SPOJ-BTCODE-A-Traversing-Grid/"/>
    <id>http://rushroom.top/SPOJ-BTCODE-A-Traversing-Grid/</id>
    <published>2023-01-25T10:53:56.928Z</published>
    <updated>2023-03-16T13:37:58.477Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP8419">题目传送门</a></p><p>简单妙妙题。</p><span id="more"></span><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有四种点的变换，分别是把点 $(x,y)$ 变成 $(y,x),(x,-y),(x+y,y),(2\cdot x,y)$。</p><p>给定起点 $(x_s,y_s)$ 和终点 $(x_d,y_d)$，问能否通过若干次变换将起点变为终点。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>结论：答案为 Yes 当且仅当 $\gcd(x_s,y_s)\cdot 2^k&#x3D;\gcd(x_d,y_d)$。</p><p>容易发现，除了第四种变换，其他三种变换后 $\gcd(x,y)$ 都不变，而第四种变换后 $\gcd(x,y)$ 最多 $\times 2$。所以最后 $\gcd(x,y)$ 只能是乘上一个 2 的整数次幂。这样我们就证明了必要性。</p><p>接下来证明充分性：发现前三项其实做的就是辗转相减，所以最后一定可以变成 $(\gcd(x_s,y_s),0)$。再经过若干次变换 4，可以变成 $(\gcd(x_d,y_d))$。<br>又可以发现，四种操作全都可逆，所以可以逆着辗转相减，最后就能变成 $(x_d,y_d)$。</p><p>于是就证明了结论是充要的。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll p = <span class="number">1</span>;x * p &lt;= y;p *= <span class="number">2ll</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x * p == y)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span> &amp;&amp; d == <span class="number">0</span>)cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span> &amp;&amp; d == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = __gcd(<span class="built_in">abs</span>(a), <span class="built_in">abs</span>(b)), f = __gcd(<span class="built_in">abs</span>(c), <span class="built_in">abs</span>(d));</span><br><span class="line">    <span class="keyword">if</span> (f % e == <span class="number">0</span> &amp;&amp; <span class="built_in">check</span>(e, f))cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/SP8419&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单妙妙题。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="SPOJ" scheme="http://rushroom.top/tags/SPOJ/"/>
    
  </entry>
  
  <entry>
    <title>CF1775E The Human Equation</title>
    <link href="http://rushroom.top/CF1775E-The-Human-Equation/"/>
    <id>http://rushroom.top/CF1775E-The-Human-Equation/</id>
    <published>2023-01-11T13:01:52.603Z</published>
    <updated>2023-03-16T13:37:44.277Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1775/problem/E">题目传送门</a></p><span id="more"></span><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为 $n$ 的数组 $a$。每次操作，你可以选出 $a$ 的一个子序列 $b$ ，然后将 $b$ 中奇数位+1，偶数位-1；或者奇数位-1，偶数位+1。求最少多少次操作能使所有数变成 $0$。</p><p>$n \le 2\cdot 10^5$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>发现如果有相邻的两个数 $x,y$ 正负性相同，那么将它们合并为 $x+y$ 是不影响的。</p><p>根据这个，我们先把 $a$ 中能合并的都合并了，合并之后，$a$ 中任意相邻两个数正负性都不同。</p><p>显然，我们不会把一个正数+1，或者把一个负数-1。所以每次操作一定是把每个正数-1，每个负数+1（因为现在的数组是奇偶相间的）。</p><p>当数组中一个数被加&#x2F;减到 0 的时候，我们将其从数组中删去，同时合并它的左右两个数（这两个数正负性一定相同）。直到数组被清空为止。我们用链表来维护数组，multiset 维护最小值，同时维护现在的时刻。数组清空时的时刻就是答案。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">ll n, a, ans;</span><br><span class="line">vector&lt;ll&gt;v;</span><br><span class="line"><span class="type">int</span> l[<span class="number">200005</span>], r[<span class="number">200005</span>];</span><br><span class="line">multiset&lt;pair&lt;ll, <span class="type">int</span>&gt;&gt;s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        <span class="keyword">if</span> (!a)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (v.<span class="built_in">empty</span>() || (v.<span class="built_in">back</span>() &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">0</span>) || (v.<span class="built_in">back</span>() &lt; <span class="number">0</span> &amp;&amp; a &gt; <span class="number">0</span>))v.<span class="built_in">pb</span>(a);</span><br><span class="line">        <span class="keyword">else</span> v.<span class="built_in">back</span>() += a;</span><br><span class="line">    &#125;</span><br><span class="line">    n = v.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i)l[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l[i] = n;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>)r[i] = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r[i] = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)v[i] = <span class="built_in">abs</span>(v[i]), s.<span class="built_in">insert</span>(<span class="built_in">mp</span>(v[i], i));</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = s.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="type">int</span> x = (*it).se;</span><br><span class="line">        ans = v[x];</span><br><span class="line">        r[l[x]] = r[x], l[r[x]] = l[x];</span><br><span class="line">        s.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">if</span> (l[x] != n &amp;&amp; r[x] != n) &#123;</span><br><span class="line">            <span class="type">int</span> L = l[x], R = r[x];</span><br><span class="line">            s.<span class="built_in">erase</span>(<span class="built_in">mp</span>(v[L], L)), s.<span class="built_in">erase</span>(<span class="built_in">mp</span>(v[R], R));</span><br><span class="line">            v[L] += v[R] - ans;</span><br><span class="line">            r[L] = r[R], l[r[R]] = L;</span><br><span class="line">            s.<span class="built_in">insert</span>(<span class="built_in">mp</span>(v[L], L));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1775/problem/E&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="数据结构" scheme="http://rushroom.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Codeforces" scheme="http://rushroom.top/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Hello 2023 比赛笔记</title>
    <link href="http://rushroom.top/Codeforces-Hello-2023-%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    <id>http://rushroom.top/Codeforces-Hello-2023-%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-08T12:27:34.541Z</published>
    <updated>2023-03-16T13:37:47.749Z</updated>
    
    <content type="html"><![CDATA[<p>vp 的，做出来 ABCDF。</p><p><a href="https://codeforces.com/contest/1779">比赛传送门</a></p><span id="more"></span><h1 id="C-Least-Prefix-Sum"><a href="#C-Least-Prefix-Sum" class="headerlink" title="C. Least Prefix Sum"></a>C. Least Prefix Sum</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为 $n$ 的数组 $a$，和一个数 $m$，每次可以花 $1$ 代价把一个数 $\times -1$，求最少要多少代价使得对于每个 $k\in[1,n]$：<br>$$\sum\limits_{i&#x3D;1}^k a_i\ge \sum\limits_{i&#x3D;1}^m a_i$$<br>$n\le 2\cdot 10^5$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>Tag: 贪心，数据结构</p><p>先考虑 $k&lt;m$ 的情况。</p><p>如果 $\sum_{i&#x3D;1}^k a_i&lt; \sum_{i&#x3D;1}^m a_i$，说明需要调整，而且一定是将 $k&lt;i\le m$ 且  $a_i&gt;0$  的 $a_i\times -1$，才能使不等式的右式值变小。我们肯定是希望改变的 $a_i$ 越大越好。</p><p>所以我们把下标从 $m-1$ 扫到 $1$，同时用 <code>priority_queue</code> 维护还没有调整过的 $a_i$。如果遇到需要调整的，就从 <code>pq</code> 中取出一个最大值，同时 <code>ans++</code>。（这个思路类似 <a href="https://codeforces.com/contest/3/problem/D">CF3D Least Cost Bracket Sequence</a>）</p><p>$k&gt;m$ 的情况类似，就是把正负反一下。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">ll n, m, a[<span class="number">200005</span>], cnt, ans;</span><br><span class="line">ll pre[<span class="number">200005</span>];</span><br><span class="line">priority_queue&lt;ll&gt;pq;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    m--;</span><br><span class="line">    ans = cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>())pq.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        cnt += a[i];</span><br><span class="line">        pre[i] = cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[m] &gt; <span class="number">0</span>)pq.<span class="built_in">push</span>(a[m] * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pre[i] &lt; pre[m]) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            pre[m] -= pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>)pq.<span class="built_in">push</span>(a[i] * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>())pq.<span class="built_in">pop</span>();</span><br><span class="line">    forr(i, m + <span class="number">1</span>, n - <span class="number">1</span>) &#123;</span><br><span class="line">        cnt += a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>)pq.<span class="built_in">push</span>(a[i] * <span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            cnt += pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Boris-and-His-Amazing-Haircut"><a href="#D-Boris-and-His-Amazing-Haircut" class="headerlink" title="D. Boris and His Amazing Haircut"></a>D. Boris and His Amazing Haircut</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定长度为 $n$ 的数组 $a,b$，你的目标是将 $a$ 变成 $b$。</p><p>你有 $m$ 种操作，每种有一个参数 $x$。你可以选择一个区间 $[l,r]$，然后对于每个 $i\in [l,r],a_i:&#x3D;\min(a_i,x)$。每种操作只能使用一次。可能有多种操作的参数一样。</p><p>询问可行性。</p><p>$n,m \le 2\cdot 10^5,a_i,b_i,c_i \le 10^9$</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>Tag: 数据结构</p><p>首先判断：如果有 $a_i&lt;b_i$ 则无解。</p><p>可以发现，对 $i$ 使用一个 $x&gt;b_i$ 的操作是没有影响的。所以我们按照 $b_i$ 从小到大来处理。设现在处理到 $v$，那么所有 $b_i\le v$ 的位置都可以使用操作。这些位置形成了一些极长的段，我们数出有多少段包含需要改变的位置（$b_i&#x3D;v$ 且 $a_i\not&#x3D;b_i$），如果数量大于参数为 $v$ 的操作数量则无解。</p><p>可以用并查集维护每个位置在哪一段。最开始我的写法是：每处理过一个位置 $i$，则把 $i-1,i,i+1$ 所在的段都合并到一起。这样会被类似 <code>2,1,3,1,2</code> 的数据卡掉（然而 WA#72，不得不说数据真水）。正确的做法是在处理 $i$ 前判断 $i-1,i+1$ 是否已经处理过了，处理过就合并。</p><p>同时还要判断是否有 $i$ 使得 $a_i\not&#x3D; b_i$ 且不存在一个操作的参数 $&#x3D;b_i$，这样也是无解的。我的实现是对于每个处理过的位置打上标记，最后看有没有位置没有标记。</p><p>要离散化。注意数组开大几倍。</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2000006</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[N], b[N], x[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="type">int</span> siz;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[i] == i)<span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> fa[i] = <span class="built_in">getf</span>(fa[i]);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;p;</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; a[i], v.<span class="built_in">pb</span>(a[i]);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; b[i], v.<span class="built_in">pb</span>(b[i]);</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">rep</span>(i, m)cin &gt;&gt; x[i], v.<span class="built_in">pb</span>(x[i]);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    siz = <span class="built_in">unique</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()) - v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i, n)a[i] = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">begin</span>() + siz, a[i]) - v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i, n)b[i] = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">begin</span>() + siz, b[i]) - v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i, m)x[i] = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">begin</span>() + siz, x[i]) - v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i, n)<span class="keyword">if</span> (a[i] &lt; b[i]) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)fa[i] = i;</span><br><span class="line">    p.<span class="built_in">resize</span>(siz);</span><br><span class="line">    <span class="built_in">rep</span>(i, siz)p[i].<span class="built_in">clear</span>(), cnt[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)p[b[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">    <span class="built_in">rep</span>(i, m)cnt[x[i]]++;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)vis[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n - <span class="number">1</span>)<span class="keyword">if</span> (b[i] == b[i + <span class="number">1</span>])fa[<span class="built_in">getf</span>(i)] = <span class="built_in">getf</span>(i + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, siz) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : p[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &amp;&amp; b[j - <span class="number">1</span>] &lt; b[j])fa[<span class="built_in">getf</span>(j - <span class="number">1</span>)] = <span class="built_in">getf</span>(j);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n - <span class="number">1</span> &amp;&amp; b[j + <span class="number">1</span>] &lt; b[j])fa[<span class="built_in">getf</span>(j)] = <span class="built_in">getf</span>(j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : p[i])<span class="keyword">if</span> (a[j] != b[j])s.<span class="built_in">insert</span>(<span class="built_in">getf</span>(j));</span><br><span class="line">        <span class="keyword">if</span> (cnt[i] &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : p[i])vis[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)<span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Anya’s-Simultaneous-Exhibition"><a href="#E-Anya’s-Simultaneous-Exhibition" class="headerlink" title="E. Anya’s Simultaneous Exhibition"></a>E. Anya’s Simultaneous Exhibition</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>交互题。</p><p>有 $n$ 个人，两两之间有胜负关系。定义一个 <strong>tourment</strong> 为：$n-1$ 场淘汰赛，最后一个人胜出。称一个人为  <strong>candidate master</strong> 当且仅当合适安排赛程后他能在 <strong>tourment</strong> 中胜出。</p><p>你可以进行至多 $2n$ 场模拟。在每场模拟中，你可以让一个人依次对战另外一些人。交互库会返回他赢的次数。请你最后输出有多少人可以成为 <strong>candidate master</strong>。</p><p>$n\le 250$</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>赛时没做出来。</p><p>以后补。</p><h1 id="F-Xorcerer’s-Stones"><a href="#F-Xorcerer’s-Stones" class="headerlink" title="F. Xorcerer’s Stones"></a>F. Xorcerer’s Stones</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定一个树，节点 $i$ 权值为 $a_i$。你可以执行至多 $2n$ 次操作，每次操作可以将一个子树内所有点变成它们的异或和。求一种可行方案使得所有数变成 $0$。无解输出 $-1$。</p><p>$n\le 2\cdot 10^5,0\le a_i \le 31$</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>Tag: 数学，DP</p><p>可以发现，如果对大小为奇数的子树执行操作，所有权值的异或和不变；如果对大小为偶数的子树执行操作，则子树内异或和变为 $0$。而当我们将整棵树的异或和变为 $0$ 后，只需要再对整棵树进行一次操作即可全部清零。</p><p>设 $f_{i,j}&#x3D;0&#x2F;1$ 表示能否使以 $i$ 为根的子树内异或和为 $j$。从子节点转移上来即可。如果以 $i$ 为根的子树大小为偶数，则 $f_{i,0}&#x3D;1$ ，即对这棵树执行一次操作。</p><p>恶心的是居然要输出方案！写个路径还原，同时如果是执行操作的地方要打上标记。</p><p>这样做好像只要 $n$ 次操作？</p><p>时间复杂度 $O(nw^2)$，其中 $w&#x3D;32$。$2\cdot 10^5 \times 32^2\approx 2\cdot 10^8$。给了 4s，能过。</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><p>赛时写的代码操作次数有点多。这里放下优化后的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], fa, son[N], siz[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;g[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;dp[N][<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i, <span class="number">32</span>)<span class="built_in">rep</span>(j, son[x] + <span class="number">1</span>)dp[x][i][j] = <span class="number">-1</span>;</span><br><span class="line">    dp[x][a[x]][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, son[x]) &#123;</span><br><span class="line">        <span class="type">int</span> y = g[x][i];</span><br><span class="line">        <span class="built_in">dfs</span>(y);</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        <span class="built_in">rep</span>(m1, <span class="number">32</span>)<span class="built_in">rep</span>(m2, <span class="number">32</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[x][m1][i] != <span class="number">-1</span> &amp;&amp; dp[y][m2][son[y]] != <span class="number">-1</span>) &#123;</span><br><span class="line">                dp[x][m1 ^ m2][i + <span class="number">1</span>] = m2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (siz[x] % <span class="number">2</span> == <span class="number">0</span>)dp[x][<span class="number">0</span>][son[x]] = <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getans</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[x][val][son[x]] == <span class="number">-2</span>) &#123;</span><br><span class="line">        ans.<span class="built_in">pb</span>(x + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = son[x] - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="type">int</span> y = g[x][i];</span><br><span class="line">        <span class="built_in">getans</span>(y, dp[x][val][i + <span class="number">1</span>]);</span><br><span class="line">        val ^= dp[x][val][i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">rep</span>(i, n - <span class="number">1</span>) cin &gt;&gt; fa, fa--, son[fa]++, g[fa].<span class="built_in">pb</span>(i + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)<span class="built_in">rep</span>(j, <span class="number">32</span>)dp[i][j].<span class="built_in">resize</span>(son[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (dp[<span class="number">0</span>][<span class="number">0</span>][son[<span class="number">0</span>]] == <span class="number">-1</span>)cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">getans</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        ans.<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : ans)cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;vp 的，做出来 ABCDF。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1779&quot;&gt;比赛传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="比赛笔记" scheme="http://rushroom.top/categories/%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数据结构" scheme="http://rushroom.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Codeforces" scheme="http://rushroom.top/tags/Codeforces/"/>
    
    <category term="贪心" scheme="http://rushroom.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="DP" scheme="http://rushroom.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>斯涅尔定律最愚蠢的证法</title>
    <link href="http://rushroom.top/%E6%96%AF%E6%B6%85%E5%B0%94%E5%AE%9A%E5%BE%8B%E6%9C%80%E6%84%9A%E8%A0%A2%E7%9A%84%E8%AF%81%E6%B3%95/"/>
    <id>http://rushroom.top/%E6%96%AF%E6%B6%85%E5%B0%94%E5%AE%9A%E5%BE%8B%E6%9C%80%E6%84%9A%E8%A0%A2%E7%9A%84%E8%AF%81%E6%B3%95/</id>
    <published>2023-01-06T13:13:00.697Z</published>
    <updated>2023-03-16T13:36:41.080Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年整的最后一个活。</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>平面直角坐标系上有两点 $S(0,h_1)$ 和 $T(w,h_2)$ 满足 $h_1&gt;0,h_2&lt;0$，一个动点 $P$ 从 $S$ 出发移动到 $T$。$P$ 在 $x$ 轴上方时的速度为 $v_1$，在 $x$ 轴下方时的速度为 $v_2$，求时间最短的路径。</p><p><img src="https://pic.imgdb.cn/item/63ae250608b683016390b61d.jpg"></p><p>斯涅尔定律：$\dfrac{\sin(\theta_1)}{v_1}&#x3D;\dfrac{\sin(\theta_2)}{v_2}$</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>显然，路径为两条线段组成的折线，转折点在 $x$ 轴上。</p><p>设折线与 $x$ 轴交点位于 $(0,x)$。</p><p><img src="https://pic.imgdb.cn/item/63ae2e2e08b683016397f915.jpg"></p><p>容易得出路径长度的函数 $f(x)$：<br>$$f(x)&#x3D;\dfrac{\sqrt{h_1^2+x^2}}{v}+\dfrac{\sqrt{h_2^2+(w-x)^2}}{v2}$$</p><p>当取 $h_1&#x3D;3,h_2&#x3D;5,w&#x3D;10,v_1&#x3D;3,v_2&#x3D;1$ 时，函数图像长这个样子：</p><p><img src="https://pic.imgdb.cn/item/63ae298008b683016394040a.jpg"></p><p>发现它是一个单谷函数，它的最小值就是唯一的极小值。所以求导：</p><p>$$f’(x)&#x3D;\dfrac{v_2x\sqrt{(w-x)^2+h_2^2}-v_1(w-x)\sqrt{x^2+h_1^2}}{v_1v_2\sqrt{x^2+h_1^2}\sqrt{(w-x)^2+h_2^2}}$$</p><p>最小值点的导数为 $0$，所以得出：</p><p>$$v_2x\sqrt{(w-x)^2+h_2^2}&#x3D;v_1(w-x)\sqrt{x^2+h_1^2}$$</p><p>$$\dfrac{x\sqrt{(w-x)^2+h_2^2}}{(w-x)\sqrt{x^2+h_1^2}}&#x3D;\dfrac{v_1}{v_2}$$</p><p>$$\dfrac{x}{\sqrt{x^2+h_1^2}}:\dfrac{w-x}{\sqrt{(w-x)^2+h_2^2}}&#x3D;v_1:v_2$$</p><p><img src="https://pic.imgdb.cn/item/63ae2ef408b6830163989977.jpg"></p><p>$$\dfrac{SP}{SM}:\dfrac{QT}{MT}&#x3D;v_1:v_2$$</p><p>$$\dfrac{\sin(\theta_1)}{v_1}&#x3D;\dfrac{\sin(\theta_2)}{v_2}$$</p><p>证毕。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022 年整的最后一个活。&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="http://rushroom.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="几何" scheme="http://rushroom.top/tags/%E5%87%A0%E4%BD%95/"/>
    
    <category term="微积分" scheme="http://rushroom.top/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>百度之星2022初赛游记</title>
    <link href="http://rushroom.top/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2022%E5%88%9D%E8%B5%9B%E6%B8%B8%E8%AE%B0/"/>
    <id>http://rushroom.top/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2022%E5%88%9D%E8%B5%9B%E6%B8%B8%E8%AE%B0/</id>
    <published>2023-01-06T13:13:00.697Z</published>
    <updated>2023-03-21T13:31:05.871Z</updated>
    
    <content type="html"><![CDATA[<p>做的是第二场。</p><p>看别人打的第一场做了 7 题还 100+ 名，一开题感觉一道都不会做，很慌。</p><p>最后做出来 5 题，66 名，很开心。</p><span id="more"></span><p>做题顺序：$1\rightarrow 3 \rightarrow 7 \rightarrow 5 \rightarrow 4$</p><p>这场显然偶数题比奇数题难。</p><h2 id="1-和"><a href="#1-和" class="headerlink" title="1. 和"></a>1. 和</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长为 $n$ 的序列，有 $q$ 次询问，每次询问 $[l,r]$ 区间内最大的 $k$ 个数之和是否 $\ge x$。</p><p>$n,q \le 10^5,k\le 10,a_i \le 10^4,x\le 10^8$</p><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>第一遍写了莫队，用 set 维护，显而易见 TLE 了。（不过这个我还写了好久 &#x2F;lh）</p><p>由于 $k$ 十分小，所以用线段树维护区间内前 $k$ 小的值，合并什么的总之就是非常暴力。</p><p>复杂度 $O(nk \log k+qk\log nk)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> n, q, k, x;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">400005</span>][<span class="number">21</span>], cnt[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        cnt[node] = <span class="number">1</span>;</span><br><span class="line">        tree[node][<span class="number">0</span>] = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">    cnt[node] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, cnt[ls])tree[node][cnt[node]++] = tree[ls][i];</span><br><span class="line">    <span class="built_in">rep</span>(i, cnt[rs])tree[node][cnt[node]++] = tree[rs][i];</span><br><span class="line">    <span class="built_in">sort</span>(tree[node], tree[node] + cnt[node]);</span><br><span class="line">    <span class="built_in">reverse</span>(tree[node], tree[node] + cnt[node]);</span><br><span class="line">    cnt[node] = <span class="built_in">min</span>(cnt[node], k);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, cnt[node])ans.<span class="built_in">pb</span>(tree[node][i]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid &gt;= L)<span class="built_in">query</span>(ls, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; R)<span class="built_in">query</span>(rs, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l, r, sum;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q &gt;&gt; k &gt;&gt; x;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">query</span>(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, l - <span class="number">1</span>, r - <span class="number">1</span>);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="built_in">min</span>((<span class="type">int</span>)ans.<span class="built_in">size</span>(), k))sum += ans[i];</span><br><span class="line">        <span class="keyword">if</span> (sum &gt;= x)cout &lt;&lt; <span class="string">&quot;Y\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;N\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-逃离这棵树"><a href="#3-逃离这棵树" class="headerlink" title="3. 逃离这棵树"></a>3. 逃离这棵树</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定一棵大小为 $n$ 的树，根节点为 $1$，每个点有权重 $p_i$，$i$ 到 $j$ 的边有权重 $q_{i,j}$。</p><p>当站在点 $i$ 上时，下一步有 $\frac{p_i}{p_i+\sum q_{i,j}}$ 的概率留在原地，有 $\frac{q_{i,j}}{p_i+\sum q_{i,j}}$ 的概率到 $j$ 节点（$j$ 为 $i$ 的儿子）。</p><p>初始时在根节点，问期望多少步后到达叶节点，对 $998244353$ 取模。</p><p>$n \le 10^6,p_i,q_{i,j}\le 10$</p><h3 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h3><p>做法类似于某场 ABC 的 E 题，只是把数轴换成了树。然而我至今没有补掉那个题，但是赛时把这个题切了。</p><p>设 $dp_i$ 为 $i$ 期望走多少步到叶节点。</p><p>考虑枚举从 $i$ 下一步到达的点 $j$，$j$ 对 $i$ 的答案的贡献是 $\frac{q_{i,j}}{p_i+\sum q_{i,j}} \cdot dp_j$。</p><p>另外，$i$ 节点期望要 $\frac{p_i+\sum q_{i,j}}{p_i}$ 步离开原地，所以 $dp_i$ 还要再加上这个数。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>)p = p * x % MOD;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">qpow</span>(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"><span class="type">int</span> n, p[<span class="number">1000006</span>], q[<span class="number">1000006</span>];</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;v;</span><br><span class="line">ll dp[<span class="number">1000006</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v[x].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        dp[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y : v[x]) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(y);</span><br><span class="line">        sum += q[y];</span><br><span class="line">    &#125;</span><br><span class="line">    ll INV = <span class="built_in">inv</span>(sum);</span><br><span class="line">    dp[x] = (sum + p[x]) * INV;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y : v[x])dp[x] = (dp[x] + q[y] * INV % MOD * dp[y] % MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n) cin &gt;&gt; p[i];</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="built_in">repp</span>(i, n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; q[i];</span><br><span class="line">        v[a - <span class="number">1</span>].<span class="built_in">pb</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-通信网络"><a href="#4-通信网络" class="headerlink" title="4. 通信网络"></a>4. 通信网络</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n$ 个点，$m$ 条边的无向图，一条边 $(u,v,w)$ 表示这条边连接 $u$ 和 $v$，长度为 $w$。有 $q$ 次询问，每次询问给定 $k$ 个关键点，第 $i$ 个关键点为 $p_i$，与这个点的距离 $\le d_i$ 的节点会被打上标记。对于每次询问，输出有多少个点被打上了标记。询问之间独立，也就是每次打上的标记会在下一次询问前清空。</p><p>$n \le 10^3,m \le 10^4,q \le 10^5,\sum k \le 10^6,w \le 10^6,d_i \le 10^9$</p><h3 id="做法-2"><a href="#做法-2" class="headerlink" title="做法"></a>做法</h3><p>把询问离线下来，对于每个关键点分别处理。</p><p>对于每个询问一个 bitset $ans_i$，$ans_{i,j}$ 表示在第 $i$ 次询问中，$j$ 是否被打上了标记。</p><p>对于每个关键点 $x$，把和它有关的询问按照 $d$ 从小到大排序。</p><p>维护一个 bitset $res$，$res_i$ 表示 $i$ 与 $x$ 的距离是否 $\le d$。容易发现，由于 $d$ 已经从小到大排序过了，所以 $res$ 中的元素只会从 $0$ 变成 $1$，或者不变。</p><p>所以先跑一边 dijkstra，处理出所有点到 $x$ 的距离，然后把所有点按照与 $x$ 的距离排序，单调地往 $res$ 中加入就可以了。处理到第 $i$ 个询问时，把 $ans_i$ 按位或上 $res$，最后答案就是 $ans_i.count()$。</p><p>复杂度 $O(n^2\log n+nm \log m+k \log k+\frac{nk}{\omega})$，能过。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, q, a, b, c;</span><br><span class="line"><span class="type">int</span> dist[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;g[<span class="number">1010</span>], v[<span class="number">1010</span>];</span><br><span class="line">bitset&lt;1010&gt;ans[<span class="number">100005</span>], tmp;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;pq;</span><br><span class="line"><span class="type">int</span> id[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="built_in">rep</span>(i, m) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        a--, b--;</span><br><span class="line">        g[a].<span class="built_in">pb</span>(<span class="built_in">mp</span>(b, c));</span><br><span class="line">        g[b].<span class="built_in">pb</span>(<span class="built_in">mp</span>(a, c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, q) &#123;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="built_in">rep</span>(j, k) &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            v[a - <span class="number">1</span>].<span class="built_in">pb</span>(<span class="built_in">mp</span>(b, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i].<span class="built_in">empty</span>())<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">init</span>(dist, <span class="number">63</span>);</span><br><span class="line">        dist[i] = <span class="number">0</span>;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="built_in">mp</span>(<span class="number">0</span>, i));</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> val = -pq.<span class="built_in">top</span>().fi, x = pq.<span class="built_in">top</span>().se;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (val != dist[x])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (g[x].<span class="built_in">size</span>())<span class="built_in">rep</span>(j, g[x].<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> y = g[x][j].fi, w = g[x][j].se;</span><br><span class="line">                <span class="keyword">if</span> (dist[y] &gt; val + w) &#123;</span><br><span class="line">                    dist[y] = val + w;</span><br><span class="line">                    pq.<span class="built_in">push</span>(<span class="built_in">mp</span>(-dist[y], y));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.<span class="built_in">reset</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, n)id[i] = i;</span><br><span class="line">        <span class="built_in">sort</span>(id, id + n, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;<span class="keyword">return</span> dist[x] &lt; dist[y];&#125;);</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(j, v[i].<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p &lt; n &amp;&amp; dist[id[p]] &lt;= v[i][j].fi) &#123;</span><br><span class="line">                tmp[id[p]] = <span class="number">1</span>;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[v[i][j].se] |= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, q)cout &lt;&lt; ans[i].<span class="built_in">count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-星球联通"><a href="#5-星球联通" class="headerlink" title="5. 星球联通"></a>5. 星球联通</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定三维空间内的 $n$ 个点，表示一个点的坐标为 $(x,y,z)$，连接两个点的代价是它们距离的平方。</p><p>现在可以免费连接 $k$ 个点，额外再连接 $i$ 个点（即一共连接 $k+i$ 个点）需要花 $c_i$ 的代价。</p><p>求将所有点连通起来的最小代价。</p><p>$k \le n \le 3000,c_i \le 10^9,x,y,z \le 10^4$</p><h3 id="做法-3"><a href="#做法-3" class="headerlink" title="做法"></a>做法</h3><p>显然枚举额外连接多少个星球，现在问题变成：</p><blockquote><p>给定一张带权完全图，连接其中 $x$ 个点，代价最少是多少。</p></blockquote><p>容易联想到最小生成树的 Kruskal 算法。改一下：</p><p>把边按边权从小到大依次检查，如果连接的两个点不在同一个连通分量里，就把这条边加进去。当有 $x-1$ 条边时结束。</p><p>这个看上去就很对的算法实际上也是对的，正确性易证，但是我不会证，大概和 Kruskal 的证法差不多。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ll n, k, c[<span class="number">3010</span>], x[<span class="number">3010</span>], y[<span class="number">3010</span>], z[<span class="number">3010</span>], ans, sum, cnt;</span><br><span class="line">vector &lt; pair&lt;ll, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt;v;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">3010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[i] == i)<span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> fa[i] = <span class="built_in">getf</span>(fa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">repp</span>(i, n - k)cin &gt;&gt; c[i];</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; z[i];</span><br><span class="line">    <span class="built_in">rep</span>(i, n)forr(j, i + <span class="number">1</span>, n - <span class="number">1</span>) &#123;</span><br><span class="line">        ll X = x[i] - x[j], Y = y[i] - y[j], Z = z[i] - z[j];</span><br><span class="line">        ll val = X * X + Y * Y + Z * Z;</span><br><span class="line">        v.<span class="built_in">pb</span>(<span class="built_in">mp</span>(val, <span class="built_in">mp</span>(i, j)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">rep</span>(i, n)fa[i] = i;</span><br><span class="line">    ans = c[n - k], sum = <span class="number">0</span>, cnt = n - k;</span><br><span class="line">    <span class="built_in">rep</span>(i, v.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> a = v[i].se.fi, b = v[i].se.se;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getf</span>(a) == <span class="built_in">getf</span>(b))<span class="keyword">continue</span>;</span><br><span class="line">        cnt--;</span><br><span class="line">        fa[<span class="built_in">getf</span>(a)] = <span class="built_in">getf</span>(b);</span><br><span class="line">        sum += v[i].fi;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, sum + c[cnt]);</span><br><span class="line">        <span class="keyword">if</span> (!cnt)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-原地传送"><a href="#7-原地传送" class="headerlink" title="7. 原地传送"></a>7. 原地传送</h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>有一个 $n\times m$ 的网格图，起点为 $(0,0)$，终点为 $(n,m)$，每次可以从 $(x,y)$ 走到 $(x+1,y)$ 或 $(x,y+1)$。</p><p>有 $k$ 个传送门，第 $i$ 个传送门在 $(x_i,y_i)$，碰到传送门就必须要立即移动到另一个传送门（不能原地传送）。</p><p>求有多少种恰好传送一次后到达终点的行走方案。</p><p>$n,m \le 10^5,k \le 2000$</p><h3 id="做法-4"><a href="#做法-4" class="headerlink" title="做法"></a>做法</h3><p>枚举传送的起点和终点是哪两个传送门，问题转化成：</p><blockquote><p>有多少种方法从起点走到传送门 $i$ &#x2F; 从传送门 $i$ 走到终点，中途不碰到任何其它的传送门。</p></blockquote><p>考虑从起点走到传送门 $i$ 的情况，另一种同理。</p><p>设 $i$ 的答案是 $dp_i$，$cnt(a,b)$ 表示向 $x$ 方向走 $a$ 步，向 $y$ 方向走 $b$ 步的方案数。</p><p>易得 $cnt(a,b)&#x3D;\binom{a+b}{a}$。</p><p>如果不考虑 “中途不碰到任何其它的传送门” 这一条件，那么 $dp_i&#x3D;cnt(x_i,y_i)$。</p><p>枚举第一个碰到的传送门 $j$，从起点走到 $j$ （中途不碰到任何其它的传送门）有 $dp_j$ 种方案，从 $j$ 走到 $i$（因为已经确定了第一个碰到的，所以后面就没有限制条件了）有 $cnt(x_i-x_j,y_i-y_j)$ 种方案，所以 $dp_i$ 要减去 $dp_j \cdot cnt(x_i-x_j,y_i-y_j)$。</p><p>然后发现只有在 $x_j\le x_i$ 且 $y_j \le y_i$ 时这个转移才有效，所以把所有坐标按照 $x+y$ 从小到大排序，计算 $dp_i$ 时只要考虑所有 $j&lt;i$。</p><p>复杂度 $O(n^2)$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, r, c, a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="type">int</span> cost1[<span class="number">20</span>][<span class="number">20</span>], cost2[<span class="number">20</span>], dp[<span class="number">20</span>][<span class="number">20</span>], ans = MAXN;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; r &gt;&gt; c;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)<span class="built_in">rep</span>(j, m)cin &gt;&gt; a[i][j];</span><br><span class="line">    <span class="built_in">repp</span>(w, (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>) &#123;</span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, m)<span class="keyword">if</span> ((w &gt;&gt; i) &amp; <span class="number">1</span>)v.<span class="built_in">pb</span>(i);</span><br><span class="line">        <span class="keyword">if</span> ((<span class="type">int</span>)v.<span class="built_in">size</span>() != c)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, n)forr(j, i + <span class="number">1</span>, n - <span class="number">1</span>) &#123;</span><br><span class="line">            cost1[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">rep</span>(k, c)cost1[i][j] += <span class="built_in">abs</span>(a[i][v[k]] - a[j][v[k]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">            cost2[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">rep</span>(j, c - <span class="number">1</span>)cost2[i] += <span class="built_in">abs</span>(a[i][v[j]] - a[i][v[j + <span class="number">1</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">init</span>(dp, <span class="number">63</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>, dp[i][<span class="number">1</span>] = cost2[i];</span><br><span class="line">            forr(j, <span class="number">2</span>, i + <span class="number">1</span>)<span class="built_in">rep</span>(k, i)dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[k][j - <span class="number">1</span>] + cost1[k][i] + cost2[i]);</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, dp[i][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>感觉这场比赛都是第一眼很吓人，仔细想想其实还好的题。</p><p>大家来了应该都能爆切吧。</p><p>QwQ</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;做的是第二场。&lt;/p&gt;
&lt;p&gt;看别人打的第一场做了 7 题还 100+ 名，一开题感觉一道都不会做，很慌。&lt;/p&gt;
&lt;p&gt;最后做出来 5 题，66 名，很开心。&lt;/p&gt;</summary>
    
    
    
    <category term="比赛笔记" scheme="http://rushroom.top/categories/%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="百度之星" scheme="http://rushroom.top/tags/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>UVA1063 Marble Game</title>
    <link href="http://rushroom.top/UVA1063-Marble-Game/"/>
    <id>http://rushroom.top/UVA1063-Marble-Game/</id>
    <published>2023-01-06T13:13:00.692Z</published>
    <updated>2023-03-16T13:38:10.089Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://onlinejudge.org/external/10/p1063.pdf">题目传送门</a></p><p>说是题解其实是 debug 记（叹气）</p><span id="more"></span><p>显然 BFS，状态我是用 <code>vector&lt;vector&lt;int&gt;&gt;</code> 来存每个格子上的 Marble 编号，洞可以根据这个推出来，就不用存。</p><p>转移时，枚举向四个方向移动。这里写四个函数可能会比较烦，我的做法是，对于 $n\in [0,4]$，先将盘面顺时针转 $n\cdot 90^\circ$，再将所有 Marble 向左移动，最后将盘面顺时针旋转 $(4-n)\cdot 90^\circ$。</p><p>注意：</p><ul><li>旋转时，Marble，洞和墙都要旋转。</li><li>移动时，如果 Marble 掉进了对应的洞里，就把这个 Marble 和洞都删掉，如果掉进了别人的洞里，就不进行这个方向的转移。</li><li>输出格式，<code>impossible</code> 首字母小写，如果答案是 1 仍然是 <code>moves</code> 而不是 <code>move</code>。</li></ul><p>然后，我就 WA 啦。</p><p>找 gzy 的程序对拍了下，放一下生成数据的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>], b[<span class="number">5</span>][<span class="number">5</span>], cnt;</span><br><span class="line"><span class="type">int</span> x[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">randint</span><span class="params">(T l, T r = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> mt19937 <span class="title">eng</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="built_in">swap</span>(l, r);</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;T&gt; <span class="title">dis</span><span class="params">(l, r)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis</span>(eng);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dx[] = &#123; <span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span> dy[] = &#123; <span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(T, <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">16</span>)x[i] = i;</span><br><span class="line">        <span class="built_in">random_shuffle</span>(x, x + <span class="number">16</span>);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">4</span>)<span class="built_in">rep</span>(j, <span class="number">4</span>)a[i][j] = x[cnt++];</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">16</span>)x[i] = i;</span><br><span class="line">        <span class="built_in">random_shuffle</span>(x, x + <span class="number">16</span>);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">4</span>)<span class="built_in">rep</span>(j, <span class="number">4</span>)b[i][j] = x[cnt++];</span><br><span class="line">        <span class="type">int</span> M = <span class="built_in">randint</span>(<span class="number">1</span>, <span class="number">8</span>), W = <span class="built_in">randint</span>(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">bool</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">4</span>)<span class="built_in">rep</span>(j, <span class="number">4</span>)<span class="keyword">if</span> (a[i][j] &lt; M &amp;&amp; b[i][j] &lt; M)f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        cout &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; M &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; W &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">rep</span>(s, M)</span><br><span class="line">            <span class="built_in">rep</span>(i, <span class="number">4</span>)<span class="built_in">rep</span>(j, <span class="number">4</span>)<span class="keyword">if</span> (a[i][j] == s)cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">rep</span>(s, M)</span><br><span class="line">            <span class="built_in">rep</span>(i, <span class="number">4</span>)<span class="built_in">rep</span>(j, <span class="number">4</span>)<span class="keyword">if</span> (b[i][j] == s)cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">while</span> (W--) &#123;</span><br><span class="line">            <span class="type">int</span> A = <span class="built_in">randint</span>(<span class="number">1</span>, <span class="number">2</span>), B = <span class="built_in">randint</span>(<span class="number">1</span>, <span class="number">2</span>), C = <span class="built_in">randint</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">            cout &lt;&lt; A &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; B &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; A + dx[C] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; B + dy[C] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;0 0 0\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拍出来几个问题：</p><ul><li>输入数据中下标是从 0 开始的</li><li>多测记得清空</li><li>每次移动后，Marble 和洞都要还原成移动前的位置</li><li>记录每个 Marble 是否出现的数组要开至少 8 大小</li></ul><p>拍出来问题的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Input 1</span><br><span class="line"></span><br><span class="line">4 3 7</span><br><span class="line">0 1</span><br><span class="line">2 0</span><br><span class="line">0 3</span><br><span class="line">2 1</span><br><span class="line">1 1</span><br><span class="line">3 2</span><br><span class="line">2 2 3 2</span><br><span class="line">1 2 1 3</span><br><span class="line">1 1 2 1</span><br><span class="line">2 1 2 2</span><br><span class="line">2 2 3 2</span><br><span class="line">2 2 3 2</span><br><span class="line">1 2 1 1</span><br><span class="line"></span><br><span class="line">Output 1</span><br><span class="line"></span><br><span class="line">impossible</span><br><span class="line"></span><br><span class="line">Input 2</span><br><span class="line"></span><br><span class="line">4 8 9</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">2 0</span><br><span class="line">3 0</span><br><span class="line">3 1</span><br><span class="line">3 2</span><br><span class="line">3 3</span><br><span class="line">2 3</span><br><span class="line">1 2</span><br><span class="line">2 2</span><br><span class="line">2 1</span><br><span class="line">1 1</span><br><span class="line">0 1</span><br><span class="line">0 2</span><br><span class="line">0 3</span><br><span class="line">1 3</span><br><span class="line">0 0 0 1</span><br><span class="line">1 0 1 1</span><br><span class="line">2 0 2 1</span><br><span class="line">2 1 3 1</span><br><span class="line">2 2 3 2</span><br><span class="line">2 2 2 3</span><br><span class="line">1 2 1 3</span><br><span class="line">0 2 1 2</span><br><span class="line">1 1 1 2</span><br><span class="line"></span><br><span class="line">Output 2</span><br><span class="line"></span><br><span class="line">25 moves</span><br></pre></td></tr></table></figure><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, w, A, B, C, D;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; A, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; B) &#123;</span><br><span class="line">    <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n)<span class="keyword">if</span> (A[i][j] != B[i][j])<span class="keyword">return</span> A[i][j] &lt; B[i][j];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; A, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; B) &#123;</span><br><span class="line">    <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n)<span class="keyword">if</span> (A[i][j] != B[i][j])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(<span class="number">5</span>), <span class="built_in">b</span>(<span class="number">5</span>), <span class="built_in">x</span>(<span class="number">5</span>), <span class="built_in">y</span>(<span class="number">5</span>), <span class="built_in">cpy</span>(<span class="number">5</span>);</span><br><span class="line"><span class="type">bool</span> f[<span class="number">5</span>][<span class="number">5</span>][<span class="number">5</span>][<span class="number">5</span>], f_[<span class="number">5</span>][<span class="number">5</span>][<span class="number">5</span>][<span class="number">5</span>], F[<span class="number">100</span>];</span><br><span class="line">map&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, <span class="type">int</span>&gt;vis;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n)cpy[i][j] = x[n + <span class="number">1</span> - j][i];</span><br><span class="line">        x = cpy;</span><br><span class="line">        <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n)cpy[i][j] = y[n + <span class="number">1</span> - j][i];</span><br><span class="line">        y = cpy;</span><br><span class="line">        <span class="built_in">repp</span>(i1, n)<span class="built_in">repp</span>(j_1, n)<span class="built_in">repp</span>(i2, n)<span class="built_in">repp</span>(j2, n)f_[i1][j_1][i2][j2] = f[n + <span class="number">1</span> - j_1][i1][n + <span class="number">1</span> - j2][i2];</span><br><span class="line">        <span class="built_in">repp</span>(i1, n)<span class="built_in">repp</span>(j_1, n)<span class="built_in">repp</span>(i2, n)<span class="built_in">repp</span>(j2, n)f[i1][j_1][i2][j2] = f_[i1][j_1][i2][j2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">repp</span>(i, n) &#123;</span><br><span class="line">        <span class="built_in">repp</span>(j, n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!x[i][j])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> k = j;</span><br><span class="line">            <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; !f[i][k - <span class="number">1</span>][i][k] &amp;&amp; !x[i][k - <span class="number">1</span>]) &#123;</span><br><span class="line">                x[i][k - <span class="number">1</span>] = x[i][k];</span><br><span class="line">                x[i][k] = <span class="number">0</span>;</span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">if</span> (y[i][k] == x[i][k]) &#123;</span><br><span class="line">                    x[i][k] = y[i][k] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (y[i][k] &amp;&amp; y[i][k] != x[i][k])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;pair&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, <span class="type">int</span>&gt;&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">mp</span>(a, <span class="number">0</span>));</span><br><span class="line">    vis[a] = T_;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        x = q.<span class="built_in">front</span>().fi;</span><br><span class="line">        <span class="type">int</span> val = q.<span class="built_in">front</span>().se;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">init</span>(F, <span class="number">0</span>);</span><br><span class="line">        <span class="type">bool</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n)<span class="keyword">if</span> (x[i][j])F[x[i][j]] = tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tmp)<span class="keyword">return</span> val;</span><br><span class="line">        <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (F[b[i][j]])y[i][j] = b[i][j];</span><br><span class="line">            <span class="keyword">else</span> y[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;xx = x, yy = y;</span><br><span class="line">        <span class="type">bool</span> suc;</span><br><span class="line">        suc = <span class="built_in">move</span>();</span><br><span class="line">        <span class="keyword">if</span> (suc &amp;&amp; vis[x] != T_)q.<span class="built_in">push</span>(<span class="built_in">mp</span>(x, val + <span class="number">1</span>)), vis[x] = T_;</span><br><span class="line">        x = xx, y = yy;</span><br><span class="line">        <span class="built_in">rotate</span>(<span class="number">1</span>);</span><br><span class="line">        suc = <span class="built_in">move</span>();</span><br><span class="line">        <span class="built_in">rotate</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (suc &amp;&amp; vis[x] != T_)q.<span class="built_in">push</span>(<span class="built_in">mp</span>(x, val + <span class="number">1</span>)), vis[x] = T_;</span><br><span class="line">        x = xx, y = yy;</span><br><span class="line">        <span class="built_in">rotate</span>(<span class="number">2</span>);</span><br><span class="line">        suc = <span class="built_in">move</span>();</span><br><span class="line">        <span class="built_in">rotate</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (suc &amp;&amp; vis[x] != T_)q.<span class="built_in">push</span>(<span class="built_in">mp</span>(x, val + <span class="number">1</span>)), vis[x] = T_;</span><br><span class="line">        x = xx, y = yy;</span><br><span class="line">        <span class="built_in">rotate</span>(<span class="number">3</span>);</span><br><span class="line">        suc = <span class="built_in">move</span>();</span><br><span class="line">        <span class="built_in">rotate</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (suc &amp;&amp; vis[x] != T_)q.<span class="built_in">push</span>(<span class="built_in">mp</span>(x, val + <span class="number">1</span>)), vis[x] = T_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">repp</span>(i, n)a[i].<span class="built_in">resize</span>(<span class="number">5</span>), b[i].<span class="built_in">resize</span>(<span class="number">5</span>), x[i].<span class="built_in">resize</span>(<span class="number">5</span>), y[i].<span class="built_in">resize</span>(<span class="number">5</span>), cpy[i].<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n)a[i][j] = b[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">repp</span>(i, n)<span class="built_in">repp</span>(j, n)<span class="built_in">repp</span>(ii, n)<span class="built_in">repp</span>(jj, n)f[i][j][ii][jj] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">repp</span>(i, m) &#123;</span><br><span class="line">        cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        a[A + <span class="number">1</span>][B + <span class="number">1</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">repp</span>(i, m) &#123;</span><br><span class="line">        cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        b[A + <span class="number">1</span>][B + <span class="number">1</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">repp</span>(i, w) &#123;</span><br><span class="line">        cin &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; D;</span><br><span class="line">        A++, B++, C++, D++;</span><br><span class="line">        f[A][B][C][D] = f[C][D][A][B] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; T_ &lt;&lt; <span class="string">&quot;: impossible\n\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; T_ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; <span class="string">&quot; moves\n\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://onlinejudge.org/external/10/p1063.pdf&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说是题解其实是 debug 记（叹气）&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="搜索" scheme="http://rushroom.top/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="UVA" scheme="http://rushroom.top/tags/UVA/"/>
    
    <category term="模拟" scheme="http://rushroom.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>FFT字符串匹配</title>
    <link href="http://rushroom.top/FFT%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>http://rushroom.top/FFT%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</id>
    <published>2023-01-06T13:13:00.682Z</published>
    <updated>2023-03-16T13:37:51.254Z</updated>
    
    <content type="html"><![CDATA[<p>用 FFT 解决（带通配符的）字符串匹配。</p><span id="more"></span><h3 id="普通字符串匹配"><a href="#普通字符串匹配" class="headerlink" title="普通字符串匹配"></a>普通字符串匹配</h3><p>设 $S$ 为模式串，$T$ 为文本串，$n&#x3D;\lvert S \rvert,m&#x3D;\lvert T \rvert$（字符串下标从 $0$ 开始）。</p><p>显然，两个字符串相同，当且仅当它们每一位都相同，这是一句废话。</p><p>我们联想到初中一年级的一句重要的话：**如果若干个非负数的和为 $0$，那么它们都为 $0$**。</p><p><em>和为 $0$</em> 正好对应了 <em>每一位都相同</em>，所以很容易得出这个 <strong>完全匹配函数</strong>（很重要！之后要考）</p><p>$$f(x)&#x3D;\sum\limits_{i&#x3D;0}^{n-1} (S_i-T_{x-n+i+1})^2$$</p><p>$f(x)$ 表示 $S$ 与 $T_{(x-n+1)\dots x}$ 的 <em>匹配值</em> 。</p><p>其中平方是为了保证每一项都是非负数。这样，只有每一项都为 $0$（即 $S_i&#x3D;T_{x+i-1}$），$f(x)$ 才会为 $0$。</p><p>显然这个柿子不是很好化简，所以我们要对它进行一点点的变形。</p><p>什么柿子容易计算呢？当然是卷积，即：</p><p>$$f(x)&#x3D;\sum\limits_{i+j&#x3D;x} A_iB_j$$</p><p>然而之前那个柿子中，$i$ 和 $x-n+i+1$ 加起来显然不是一个定值。如何把这个 $i$ 消掉呢？</p><p>我们考虑把 $S$ 整个串反转，这样原来的 $i$ 就变成了 $n-i-1$。</p><p>于是变成：</p><p>$$f(x)&#x3D;\sum\limits_{i&#x3D;0}^{n-1} (S_{n-i+1}-T_{x-n+i+1})^2$$</p><p>两个下标相加：</p><p>$$(n-i+1)+(x-n+i+1)&#x3D;x$$</p><p>好耶！消掉了！</p><p>于是那个柿子就可以写成：</p><p>$$f(x)&#x3D;\sum\limits_{i+j&#x3D;x}(S_i-T_j)^2$$</p><p>用完全平方公式拆开：</p><p>$$f(x)&#x3D;\sum\limits_{i+j&#x3D;x}S_i^2-2S_iT_j+T_j^2$$</p><p>显然第一项和第三项可以预处理得到，第二项就是 $S\cdot T$ 中 $x$ 次项的系数乘上 $-2$，只需要把 $S$ 和 $T$ 看成多项式，FFT 相乘即可。</p><p>复杂度 $O(n \log n)$。</p><h3 id="带通配符的字符串匹配"><a href="#带通配符的字符串匹配" class="headerlink" title="带通配符的字符串匹配"></a>带通配符的字符串匹配</h3><p><strong>通配符</strong>，即可以匹配任意字符的字符（当然也可以匹配通配符）。</p><p>显然这种问题 KMP 就无能为力了。然而，对于 FFT 做法，我们仍然可以用相似的思路解决。</p><p>我们发现，原来 <strong>完全匹配函数</strong> 为 $0$，当且仅当对应的两个字符相同。但是，现在有了通配符，条件应该改为满足以下两个中任意一个：</p><ul><li>对应两个字符相同</li><li>对应两个字符中有任意一个是通配符</li></ul><p>很容易想到设通配符为 $0$（当然其它任何字符都不能为 $0$）。<strong>完全匹配函数</strong> 就变成了：</p><p>$$f(x)&#x3D;\sum\limits_{i&#x3D;0}^{n-1} (S_i-T_{x-n+i+1})^2 \cdot S_iT_j$$</p><p>如果 $S_i&#x3D;0$ 或 $T_i&#x3D;0$，那么 $f(x)$ 仍然为 $0$。</p><p>老规矩，反转 $S$：</p><p>$$f(x)&#x3D;\sum\limits_{i&#x3D;0}^{n-1} (S_{n-i+1}-T_{x-n+i+1})^2 \cdot S_iT_j$$</p><p>化成卷积形式：</p><p>$$f(x)&#x3D;\sum\limits_{i+j&#x3D;x}(S_i-T_j)^2 \cdot S_iT_j$$</p><p>完全平方公式：</p><p>$$f(x)&#x3D;\sum\limits_{i+j&#x3D;x}S_i^3T_j-2S_i^2T_j^2+S_iT_j^3$$</p><p>看起来很复杂？但每一项还是卷积的形式，于是就用很多次 FFT 解决了。</p><p>复杂度 $O(n \log n)$。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p>残缺的字符串</p><ul><li><a href="https://www.luogu.com.cn/problem/P4173">Luogu 传送门</a></li><li><a href="https://darkbzoj.cc/problem/4259">黑暗爆炸OJ 传送门</a></li></ul><h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>就是模板题，按上面方法做就完了。</p><p>注意数组大小好好算，$eps$ 我取的 $1$ 过了。</p><p>常数有点大，吸氧能过。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">int</span> T_, case_;</span><br><span class="line"><span class="type">int</span> n1, n2, n = <span class="number">1</span>, len = <span class="number">0</span>;</span><br><span class="line">string s, t;</span><br><span class="line"><span class="type">int</span> S[MAXN], T[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line">    <span class="type">double</span> r, i;</span><br><span class="line">    <span class="built_in">Complex</span>() &#123; r = i = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r_, <span class="type">double</span> i_) :<span class="built_in">r</span>(r_), <span class="built_in">i</span>(i_) &#123;&#125;;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; x)<span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Complex</span>(r + x.r, i + x.i); &#125;;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex&amp; x)<span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Complex</span>(r - x.r, i - x.i); &#125;;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="type">const</span> Complex&amp; x)<span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Complex</span>(r * x.r - i * x.i, i * x.r + r * x.i); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> rev[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(Complex* a, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)<span class="keyword">if</span> (i &lt; rev[i])<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">    <span class="built_in">repp</span>(d, <span class="built_in">log2</span>(n)) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span> &lt;&lt; d;</span><br><span class="line">        Complex wn = <span class="built_in">Complex</span>(<span class="built_in">cos</span>(<span class="number">2.0</span> * pi / l), f * <span class="built_in">sin</span>(<span class="number">2.0</span> * pi / l));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i += l) &#123;</span><br><span class="line">            Complex w = <span class="built_in">Complex</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">rep</span>(j, l / <span class="number">2</span>) &#123;</span><br><span class="line">                Complex t = w * a[i + j + l / <span class="number">2</span>], u = a[i + j];</span><br><span class="line">                a[i + j] = u + t;</span><br><span class="line">                a[i + j + l / <span class="number">2</span>] = u - t;</span><br><span class="line">                w = w * wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="number">-1</span>)<span class="built_in">rep</span>(i, n)a[i].r /= n;</span><br><span class="line">&#125;</span><br><span class="line">Complex a[MAXN], b[MAXN], ans[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (n &lt; n1 + n2)n *= <span class="number">2</span>, len++;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)rev[i] = (rev[i / <span class="number">2</span>] / <span class="number">2</span> | ((i &amp; <span class="number">1</span>) &lt;&lt; (len - <span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">rep</span>(i, n1)S[i] = (<span class="built_in">isalpha</span>(s[i]) ? s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n2)T[i] = (<span class="built_in">isalpha</span>(t[i]) ? t[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)a[i] = <span class="built_in">Complex</span>(S[i] * S[i] * S[i], <span class="number">0</span>), b[i] = <span class="built_in">Complex</span>(T[i], <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">FFT</span>(a, <span class="number">1</span>), <span class="built_in">FFT</span>(b, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)ans[i] = a[i] * b[i];</span><br><span class="line">    <span class="built_in">rep</span>(i, n)a[i] = <span class="built_in">Complex</span>(S[i] * S[i], <span class="number">0</span>), b[i] = <span class="built_in">Complex</span>(T[i] * T[i], <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">FFT</span>(a, <span class="number">1</span>), <span class="built_in">FFT</span>(b, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)ans[i] = ans[i] - <span class="built_in">Complex</span>(<span class="number">2</span>, <span class="number">0</span>) * a[i] * b[i];</span><br><span class="line">    <span class="built_in">rep</span>(i, n)a[i] = <span class="built_in">Complex</span>(S[i], <span class="number">0</span>), b[i] = <span class="built_in">Complex</span>(T[i] * T[i] * T[i], <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">FFT</span>(a, <span class="number">1</span>), <span class="built_in">FFT</span>(b, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)ans[i] = ans[i] + a[i] * b[i];</span><br><span class="line">    <span class="built_in">FFT</span>(ans, <span class="number">-1</span>);</span><br><span class="line">    forr(i, n1 - <span class="number">1</span>, n2 - <span class="number">1</span>)<span class="keyword">if</span> (<span class="built_in">fabs</span>(ans[i].r) &lt;= <span class="number">1</span>)v.<span class="built_in">pb</span>(i - n1 + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (v.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">rep</span>(i, v.<span class="built_in">size</span>())cout &lt;&lt; v[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>CF528D Fuzzy Search</p><ul><li><a href="https://www.luogu.com.cn/problem/CF528D">Luogu 传送门</a></li><li><a href="https://codeforces.com/contest/528/problem/D">Codeforces 传送门</a></li></ul><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>有两个字符串 $S,T$，长度分别为 $n,m$，字符集为 ${A,C,G,T}$，和一个整数 $k$。</p><p>我们称 <em>$S$ 在 $T$ 的第 $i$ 位出现了</em>，当且仅当把 $S$ 的首字符和 $T$ 的第 $i$ 个字符对齐后，$S$ 中的每一个字符能够在 $T$ 中找到一个位置偏差不超过 $k$ 的相同字符。</p><p>即对于所有的 $j \in[1,n]$，都存在一个 $p \in [1,m]$ 使得 $|(i+j-1)-p| \leq k$ 且 $S_p&#x3D;T_j$ 。</p><p>请求出 $S$ 在 $T$ 中出现的次数。</p><h4 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h4><p>首先把四种字母分开来考虑，最后取四个集合的交即可。</p><p>接下来假设只考虑字母 <code>A</code>，其余三个同理。</p><p>先把 $S$ 和 $T$ 除了 <code>A</code> 的部分都去掉（即空白），其余位置涂色。</p><p>接下来对 $T$ 处理：由于 $T$ 中的一个 <code>A</code>（假设在第 $i$ 位）可以影响到 $[i-k,i+k]$ 这些位置，所以把这些位置全都涂色。</p><p>接下来直接匹配即可。对于 $S$ 上有颜色的位置，$T$ 对应位置一定要有颜色；而对于 $S$ 上空白的位置，$T$ 对应位置可以有颜色，也可以是空白。</p><p>于是把 $T$ 的涂色部分看成 $1$，空白部分看成 $2$，$S$ 的涂色部分看成 $1$，空白部分看成 $0$（即通配符）。</p><p>复杂度 $O(n \log n)$。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">int</span> T_, case_;</span><br><span class="line"><span class="type">int</span> n1, n2, n = <span class="number">1</span>, len = <span class="number">0</span>, k;</span><br><span class="line">string s, t;</span><br><span class="line"><span class="type">int</span> S[MAXN], T[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line">    <span class="type">double</span> r, i;</span><br><span class="line">    <span class="built_in">Complex</span>() &#123; r = i = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r_, <span class="type">double</span> i_) :<span class="built_in">r</span>(r_), <span class="built_in">i</span>(i_) &#123;&#125;;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex&amp; x)<span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Complex</span>(r + x.r, i + x.i); &#125;;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="type">const</span> Complex&amp; x)<span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Complex</span>(r - x.r, i - x.i); &#125;;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="type">const</span> Complex&amp; x)<span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">Complex</span>(r * x.r - i * x.i, i * x.r + r * x.i); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> rev[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(Complex* a, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)<span class="keyword">if</span> (i &lt; rev[i])<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">    <span class="built_in">repp</span>(d, <span class="built_in">log2</span>(n)) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span> &lt;&lt; d;</span><br><span class="line">        Complex wn = <span class="built_in">Complex</span>(<span class="built_in">cos</span>(<span class="number">2.0</span> * pi / l), f * <span class="built_in">sin</span>(<span class="number">2.0</span> * pi / l));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i += l) &#123;</span><br><span class="line">            Complex w = <span class="built_in">Complex</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">rep</span>(j, l / <span class="number">2</span>) &#123;</span><br><span class="line">                Complex t = w * a[i + j + l / <span class="number">2</span>], u = a[i + j];</span><br><span class="line">                a[i + j] = u + t;</span><br><span class="line">                a[i + j + l / <span class="number">2</span>] = u - t;</span><br><span class="line">                w = w * wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="number">-1</span>)<span class="built_in">rep</span>(i, n)a[i].r /= n;</span><br><span class="line">&#125;</span><br><span class="line">Complex a[MAXN], b[MAXN], ans[MAXN];</span><br><span class="line"><span class="type">char</span> C[] = &#123; <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;T&#x27;</span> &#125;;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"><span class="type">int</span> sum[MAXN], SUM = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n2 &gt;&gt; n1 &gt;&gt; k &gt;&gt; t &gt;&gt; s;</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (n &lt; n1 + n2)n *= <span class="number">2</span>, len++;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)rev[i] = (rev[i / <span class="number">2</span>] / <span class="number">2</span> | ((i &amp; <span class="number">1</span>) &lt;&lt; (len - <span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">rep</span>(c, <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, n1)S[i] = (s[i] == C[c]);</span><br><span class="line">        d = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="built_in">min</span>(k, n2))d += (t[i] == C[c]);</span><br><span class="line">        <span class="built_in">rep</span>(i, n2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + k &lt; n2)d += (t[i + k] == C[c]);</span><br><span class="line">            T[i] = (d &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (i - k &gt;= <span class="number">0</span>)d -= (t[i - k] == C[c]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, n)a[i] = <span class="built_in">Complex</span>(S[i] * S[i] * S[i], <span class="number">0</span>), b[i] = <span class="built_in">Complex</span>(T[i], <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">FFT</span>(a, <span class="number">1</span>), <span class="built_in">FFT</span>(b, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i, n)ans[i] = a[i] * b[i];</span><br><span class="line">        <span class="built_in">rep</span>(i, n)a[i] = <span class="built_in">Complex</span>(S[i] * S[i], <span class="number">0</span>), b[i] = <span class="built_in">Complex</span>(T[i] * T[i], <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">FFT</span>(a, <span class="number">1</span>), <span class="built_in">FFT</span>(b, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i, n)ans[i] = ans[i] - <span class="built_in">Complex</span>(<span class="number">2</span>, <span class="number">0</span>) * a[i] * b[i];</span><br><span class="line">        <span class="built_in">rep</span>(i, n)a[i] = <span class="built_in">Complex</span>(S[i], <span class="number">0</span>), b[i] = <span class="built_in">Complex</span>(T[i] * T[i] * T[i], <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">FFT</span>(a, <span class="number">1</span>), <span class="built_in">FFT</span>(b, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i, n)ans[i] = ans[i] + a[i] * b[i];</span><br><span class="line">        <span class="built_in">FFT</span>(ans, <span class="number">-1</span>);</span><br><span class="line">        forr(i, n1 - <span class="number">1</span>, n2 - <span class="number">1</span>)<span class="keyword">if</span> (<span class="built_in">fabs</span>(ans[i].r) &lt;= <span class="number">1</span>)sum[i - n1 + <span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, n2 - n1 + <span class="number">1</span>)<span class="keyword">if</span> (sum[i] == <span class="number">4</span>)SUM++;</span><br><span class="line">    cout &lt;&lt; SUM;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;用 FFT 解决（带通配符的）字符串匹配。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://rushroom.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="字符串" scheme="http://rushroom.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="FFT" scheme="http://rushroom.top/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>POJ1874 Trade on Verweggistan</title>
    <link href="http://rushroom.top/POJ1874-Trade-on-Verweggistan/"/>
    <id>http://rushroom.top/POJ1874-Trade-on-Verweggistan/</id>
    <published>2023-01-06T13:13:00.682Z</published>
    <updated>2023-03-16T13:37:54.733Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1874">题目传送门</a></p><p><strong>本题最大难点：读题。</strong></p><span id="more"></span><p>首先说一下题意：</p><blockquote><p>有 $w$ 堆货物，第 $i$ 堆有 $b_i$ 个，从上往下给定每个货物的进价。<br>所有货物的售价都是 $10$，但是如果想买一件货物，必须要先买在它上面的所有货物。<br>求出最大利润，以及要达成这个利润，需要买多少个货物，可能有多种方案，从小到大输出。如果超过 $10$ 个只需要输出最小的 $10$ 个。</p></blockquote><p>显然先把每堆的前缀和从大到小排序，最大利润就是每堆 rk1 的前缀和加起来。</p><p>比较烦的是有的堆前缀和可能 $\le 0$。</p><p>这里有个小 trick：每堆在排序时加一个元素 $(0,0)$，表示前 $0$ 个的利润和是 $0$。这样就可以挤掉 $\le 0$ 的情况。</p><p>接下来处理货物数。</p><p>最小就是每堆 rk1 的长度的和，贪心计算出接下来最小的方案是什么：遍历一遍现有的所有方案，算出所有拓展的方式取 min，然后把这种方案加到答案队伍里。要去重。已经有 $10$ 个不重复的就 <code>break</code>。</p><p>注意：</p><ul><li>$b$ 有可能是 $0$</li><li>输出格式，每组数据之间要空一行</li><li>实在不行去 udebug 上找组数据测测</li></ul><p>加了 IO 优化才过。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt;v;</span><br><span class="line"><span class="type">int</span> rk[<span class="number">20000</span>][<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        v[i].<span class="built_in">clear</span>();</span><br><span class="line">        v[i].<span class="built_in">pb</span>(<span class="built_in">mp</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">rep</span>(j, m) &#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            sum += <span class="number">10</span> - a;</span><br><span class="line">            v[i].<span class="built_in">pb</span>(<span class="built_in">mp</span>(-sum, j + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)sum -= v[i][<span class="number">0</span>].fi;</span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">init</span>(rk[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, n) rk[<span class="number">0</span>][n] += v[i][<span class="number">0</span>].se;</span><br><span class="line">    <span class="built_in">rep</span>(I, <span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="type">int</span> mn = MAXN, id1, id2;</span><br><span class="line">        <span class="built_in">rep</span>(i, ans) &#123;</span><br><span class="line">            <span class="built_in">rep</span>(j, n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rk[i][j] &lt; <span class="number">0</span> || rk[i][j] &gt;= (<span class="type">int</span>)v[j].<span class="built_in">size</span>() - <span class="number">1</span> || v[j][rk[i][j] + <span class="number">1</span>].fi != v[j][rk[i][j]].fi)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (rk[i][n] + v[j][rk[i][j] + <span class="number">1</span>].se - v[j][rk[i][j]].se &lt; mn) &#123;</span><br><span class="line">                    mn = rk[i][n] + v[j][rk[i][j] + <span class="number">1</span>].se - v[j][rk[i][j]].se;</span><br><span class="line">                    id1 = i;</span><br><span class="line">                    id2 = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mn == MAXN)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, n)rk[ans][i] = rk[id1][i];</span><br><span class="line">        rk[ans][id2]++;</span><br><span class="line">        rk[id1][id2] = <span class="number">-1</span>;</span><br><span class="line">        rk[ans][n] = mn;</span><br><span class="line">        <span class="keyword">if</span> (rk[ans][n] != rk[ans - <span class="number">1</span>][n])cnt++;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">10</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Workyards &quot;</span> &lt;&lt; T_ &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Maximum profit is &quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Number of pruls to buy:&quot;</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, ans)<span class="keyword">if</span> (!i || rk[i][n] != rk[i - <span class="number">1</span>][n])cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; rk[i][n];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    T_ = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!n)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (T_ &gt; <span class="number">1</span>)cout &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        T_++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种也许可行的办法</p><p>爆搜出所有方案，放到 <code>set</code> 里去找到前十。上次 CSP-J 被 <code>set</code> 坑到 TLE ，就没敢用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1874&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本题最大难点：读题。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="贪心" scheme="http://rushroom.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="POJ" scheme="http://rushroom.top/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>URAL1095 Nikifor 3</title>
    <link href="http://rushroom.top/URAL1095-Nikifor-3/"/>
    <id>http://rushroom.top/URAL1095-Nikifor-3/</id>
    <published>2023-01-06T13:13:00.682Z</published>
    <updated>2023-03-16T13:38:03.146Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://acm.timus.ru/problem.aspx?space=1&num=1095">题目传送门</a></p><p>打表找规律。</p><span id="more"></span><p>首先你得先打个表，就像这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, <span class="number">4</span>) cout &lt;&lt; a[i], x = x * <span class="number">10</span> + a[i];</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; x % <span class="number">7</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a, a + <span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>然后你就能惊讶地发现，对于每个 $i\in [1,7]$，都有至少一个 $1,2,3,4$ 的排列满足：$(组成的四位数)\equiv i\pmod i$。</p><p>所以考虑先在字符串中去掉 $1,2,3,4$，将剩余的所有数字放在最后面，并处理出这串数 $\bmod 7$ 是多少，然后把 $1,2,3,4$ 按照某种顺序放在最前面就行了。</p><p>之所以要把剩余部分放在最后面而不是最前面的原因是，如果有这样一组数据：<code>001234</code>，就会出现前导零。</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> T_, case_;</span><br><span class="line"><span class="type">int</span> A[<span class="number">7</span>][<span class="number">4</span>], sum, p;</span><br><span class="line">string s, t;</span><br><span class="line"><span class="type">bool</span> f[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">init</span>(f, <span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    p = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= <span class="number">4</span> &amp;&amp; !f[x])f[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            t += s[i];</span><br><span class="line">            p = p * <span class="number">10</span> % <span class="number">7</span>;</span><br><span class="line">            sum = (sum * <span class="number">10</span> + x) % <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, <span class="number">7</span>)<span class="keyword">if</span> ((i * p + sum) % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(j, <span class="number">4</span>)cout &lt;&lt; A[i][j];</span><br><span class="line">        cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>(A, <span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">4</span>) x = x * <span class="number">10</span> + a[i];</span><br><span class="line">        <span class="keyword">if</span> (A[x % <span class="number">7</span>][<span class="number">0</span>] == <span class="number">-1</span>)<span class="built_in">rep</span>(i, <span class="number">4</span>)A[x % <span class="number">7</span>][i] = a[i];</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a, a + <span class="number">4</span>));</span><br><span class="line">    T_ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; T_;</span><br><span class="line">    <span class="keyword">for</span> (case_ = <span class="number">1</span>; case_ &lt;= T_; case_++)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://acm.timus.ru/problem.aspx?space=1&amp;num=1095&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打表找规律。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="URAL" scheme="http://rushroom.top/tags/URAL/"/>
    
  </entry>
  
  <entry>
    <title>ABC255比赛笔记</title>
    <link href="http://rushroom.top/ABC255%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    <id>http://rushroom.top/ABC255%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-06T13:13:00.669Z</published>
    <updated>2023-03-24T12:07:37.639Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/abc255">比赛传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做出来 7 题，第一次做出 Ex，感觉还不错。</p><p>上一次做出 7 题还是在很久以前呢 &#x2F;wx</p><span id="more"></span><p>为啥 ABC 前几题越来越难了啊，感觉 C 都有 D 的水平了。</p><p>交错程序一发，可真有我的。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="E-Lucky-Numbers"><a href="#E-Lucky-Numbers" class="headerlink" title="E - Lucky Numbers"></a>E - Lucky Numbers</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有一个未知的长度为 $N$ 的数列 $A$ 满足 $A_i+A_{i+1}&#x3D;S_i$，给定 $S$ 和一个大小为 $M$ 的集合 $X$，求最多有多少个 $i$ 满足 $A_i \in X$。</p><p>$N \le 10^6,M \le 10,-10^9 \le S_i,X_i \le 10^9$</p><h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>Tag: 数学</p><p>先钦定 $A_1&#x3D;0$，推出整个 $A$。</p><p>容易得到，如果 $A_1+1$，那么必定会有 $A_2-1,A_3+1,A_4-1,A_5+1\dots$，即奇数下标的 $+1$，偶数下标的 $-1$。</p><p>对于每个奇数的 $i$ 处理出所有 $X_j-A_i$，对于每个偶数的 $i$ 处理出所有 $A_i-X_j$，这样就可以统计出 $A_1+W$ 后的答案，即为 $W$ 在统计中出现的次数。在左右出现次数中取最大值即可。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ll n, m, s[<span class="number">100005</span>], x[<span class="number">20</span>], a[<span class="number">100005</span>], ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;ll&gt;v;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">rep</span>(i, n - <span class="number">1</span>)cin &gt;&gt; s[i];</span><br><span class="line">    <span class="built_in">rep</span>(i, m)cin &gt;&gt; x[i];</span><br><span class="line">    forr(i, <span class="number">1</span>, n - <span class="number">1</span>)a[i] = s[i - <span class="number">1</span>] - a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">rep</span>(i, n) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(j, m) &#123;</span><br><span class="line">            ll tmp;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)tmp = a[i] - x[j];</span><br><span class="line">            <span class="keyword">else</span> tmp = x[j] - a[i];</span><br><span class="line">            v.<span class="built_in">pb</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    ll l, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; (ll)v.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        l = r;</span><br><span class="line">        <span class="keyword">while</span> (r + <span class="number">1</span> &lt; (ll)v.<span class="built_in">size</span>() &amp;&amp; v[r + <span class="number">1</span>] == v[l])r++;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-Pre-order-and-In-order"><a href="#F-Pre-order-and-In-order" class="headerlink" title="F - Pre-order and In-order"></a>F - Pre-order and In-order</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给出一棵树的前序遍历 $P$ 和中序遍历 $I$，求这棵树的形态，或判断无解。</p><p>$N \le 2\times 10^5$</p><h4 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h4><p>CSP 初赛经典题了属于是。</p><p>考虑 $P_{l\dots r}$ 匹配 $I_{L\dots R}$。</p><p>显然 $P_l$ 为根，所以就可将 $I$ 划分成两段，即 $P_l$ 的左边和右边。知道左右子树大小后，就可以将 $P_{L+1\dots R}$ 划分成两段，递归即可。</p><p>如果 $P_l$ 在 $I_{L\dots R}$ 中没有出现则判断无解。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, a[<span class="number">200005</span>], b[<span class="number">200005</span>], p[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> son[<span class="number">200005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r || L &gt; R || !ans)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> x = a[l], y = p[a[l]], lenl = y - L, lenr = R - y;</span><br><span class="line">    <span class="keyword">if</span> (y&lt;L || y&gt;R)ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (lenl &gt; <span class="number">0</span>)son[x][<span class="number">0</span>] = a[l + <span class="number">1</span>] + <span class="number">1</span>, <span class="built_in">dfs</span>(l + <span class="number">1</span>, l + lenl, L, y - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (lenr &gt; <span class="number">0</span>)son[x][<span class="number">1</span>] = a[l + lenl + <span class="number">1</span>] + <span class="number">1</span>, <span class="built_in">dfs</span>(l + lenl + <span class="number">1</span>, r, y + <span class="number">1</span>, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; a[i], a[i]--;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cin &gt;&gt; b[i], b[i]--, p[b[i]] = i;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>]) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ans)cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">rep</span>(i, n)cout &lt;&lt; son[i][<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; son[i][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-Constrained-Nim"><a href="#G-Constrained-Nim" class="headerlink" title="G - Constrained Nim"></a>G - Constrained Nim</h3><p>没看。</p><h3 id="Ex-Range-Harvest-Query"><a href="#Ex-Range-Harvest-Query" class="headerlink" title="Ex - Range Harvest Query"></a>Ex - Range Harvest Query</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>有 $N$ 棵树，第 $0$ 天它们都没有果子，每天晚上，第 $i$ 棵树会结出 $i$ 个果子。</p><p>共有 $Q$ 次采摘，第 $i$ 次在第 $D_i$ 天晚上，采走第 $L_i$ 到 $R_i$ 棵树上所有的果子。</p><p>对于每次采摘，输出采到了多少果子，对 $998244353$ 取模。</p><p>$N,D_i \le 10^{18},Q \le 2 \times 10^5,D_i&lt;D_{i+1}$</p><h4 id="做法-2"><a href="#做法-2" class="headerlink" title="做法"></a>做法</h4><p>Tag: 数据结构，珂朵莉树</p><p>珂朵莉树模板题。</p><p>感谢 lxl！</p><p>维护每棵树最后被采摘的区间，每次用等差数列求和处理区间贡献，再区间赋值即可。</p><p>由于每次操作只会 <code>split</code> 出 至多 $2$ 个区间，所以区间总数是 $O(Q)$ 的，并且查询复杂度和包含的区间个数有关，查询后会将这些区间全部合并到一起，所以最多只会查询 $O(Q)$ 个区间，算上 <code>set</code> 复杂度，总时间复杂度为 $O(Q \log Q)$。</p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    ll l, r;</span><br><span class="line">    <span class="keyword">mutable</span> ll val;</span><br><span class="line">    <span class="built_in">Node</span>(ll a = <span class="number">-1</span>, ll b = <span class="number">-1</span>, ll c = <span class="number">0</span>) &#123;</span><br><span class="line">        l = a, r = b, val = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node&amp; a) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; a.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt;s;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;ll, ll&gt;x, pair&lt;ll, ll&gt;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.first &lt; y.first;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;Node&gt;::<span class="function">iterator <span class="title">split</span><span class="params">(ll pos)</span> </span>&#123;</span><br><span class="line">    set&lt;Node&gt;::iterator it = s.<span class="built_in">lower_bound</span>(<span class="built_in">Node</span>(pos));</span><br><span class="line">    <span class="keyword">if</span> (it != s.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos)<span class="keyword">return</span> it;</span><br><span class="line">    --it;</span><br><span class="line">    Node tmp = *it;</span><br><span class="line">    s.<span class="built_in">erase</span>(it);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Node</span>(tmp.l, pos - <span class="number">1</span>, tmp.val));</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos, tmp.r, tmp.val)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(ll l, ll r, ll val)</span> </span>&#123;</span><br><span class="line">    set&lt;Node&gt;::iterator itr = <span class="built_in">split</span>(r + <span class="number">1</span>), itl = <span class="built_in">split</span>(l);</span><br><span class="line">    s.<span class="built_in">erase</span>(itl, itr);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, r, val));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll x, ll y)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    a %= y;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>)ans = (ans * a) % y;</span><br><span class="line">        a = (a * a) % y;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll e_2;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll l, ll r, ll d)</span> </span>&#123;</span><br><span class="line">    set&lt;Node&gt;::iterator itr = <span class="built_in">split</span>(r + <span class="number">1</span>), itl = <span class="built_in">split</span>(l);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (set&lt;Node&gt;::iterator it = itl; it != itr; it++) &#123;</span><br><span class="line">        ll L = it-&gt;l, R = it-&gt;r, lst = it-&gt;val;</span><br><span class="line">        ll sum = (L % MOD + R % MOD) % MOD * ((R - L + <span class="number">1</span>) % MOD) % MOD * e_2 % MOD;</span><br><span class="line">        ans = (ans + (d % MOD - lst) % MOD * sum % MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans + MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line">ll n, q, d, l, r;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    e_2 = <span class="built_in">qpow</span>(<span class="number">2</span>, MOD - <span class="number">2</span>, MOD);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">1</span>, n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; d &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">query</span>(l, r, d) &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">assign</span>(l, r, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>赛后难度出来了，果然 G&gt;Ex 呢 &#x2F;hx</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/abc255&quot;&gt;比赛传送门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做出来 7 题，第一次做出 Ex，感觉还不错。&lt;/p&gt;
&lt;p&gt;上一次做出 7 题还是在很久以前呢 &amp;#x2F;wx&lt;/p&gt;</summary>
    
    
    
    <category term="比赛笔记" scheme="http://rushroom.top/categories/%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="AtCoder" scheme="http://rushroom.top/tags/AtCoder/"/>
    
    <category term="数学" scheme="http://rushroom.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="图论" scheme="http://rushroom.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="数据结构" scheme="http://rushroom.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CF1680F Lenient Vertex Cover</title>
    <link href="http://rushroom.top/CF1680F-Lenient-Vertex-Cover/"/>
    <id>http://rushroom.top/CF1680F-Lenient-Vertex-Cover/</id>
    <published>2023-01-06T13:13:00.669Z</published>
    <updated>2023-03-24T09:47:11.580Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1680/problem/F">题目传送门</a></p><p>DFS 树的性质。</p><span id="more"></span><p>首先注意到题面中的这一句话：</p><blockquote><p>最多只能有一条边，满足两个顶点都在这个点集中。</p></blockquote><p>显然，“最多只能有一条边”意思就是有 $0$ 条或 $1$ 条。</p><h3 id="0-条"><a href="#0-条" class="headerlink" title="0 条"></a>0 条</h3><p>所以每条边都恰好只有一个顶点在点集中。</p><p>很自然想到二分图染色，每条边两个顶点颜色不同。</p><p>所以只要这个图是二分图，就一定有解。</p><h3 id="1-条"><a href="#1-条" class="headerlink" title="1 条"></a>1 条</h3><p>有一条边的两个点同色，那么去掉这个边后，剩下的图一定就是一个二分图，就转化成了上一个情况。</p><p>先 DFS 一遍。一个<del>显然的</del>重要的性质是：对于原图中的每条边，要么是 DFS 树中的一条边，要么是一条返祖边（即一个点连向它祖先的边）。</p><p>因为二分图中没有奇环，所以这条去掉的边一定在所有奇环上，而不能在任何一个偶环上（这样去掉之后就全是偶环了）。</p><p>考虑去掉什么边。</p><h4 id="返祖边"><a href="#返祖边" class="headerlink" title="返祖边"></a>返祖边</h4><p>因为一个环在 DFS 树中一定是一条链加上一条返祖边，所以在 DFS 遇到返祖边时判断这个环是奇环还是偶环，就能统计出奇环数量了。如果奇环数量为 $1$，那么直接去掉那条返祖边即可。</p><h4 id="树边"><a href="#树边" class="headerlink" title="树边"></a>树边</h4><p>在统计环时把环上的所有树边都标记 $+1$，最后看是否有一个树边满足：</p><ul><li>所在的奇环数 $&#x3D;$ 奇环总数</li><li>所在的偶环数 $&#x3D;0$</li></ul><p>即可。</p><p>标记时用树上差分即可，不会的同学可以左转 OI Wiki。</p><p>最后判断答案时只需要再 DFS 一遍，按照深度奇偶性染色即可。</p><p><strong>注意</strong>：有可能结果是：一条边满足两个顶点都不在点集中，其他每条边都有一个顶点在点集中。这时候只需要把所有颜色反转即可。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, a[<span class="number">1000006</span>], b[<span class="number">1000006</span>];</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;v;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">1000006</span>], fa[<span class="number">1000006</span>], d1[<span class="number">1000006</span>], d2[<span class="number">1000006</span>], s1[<span class="number">1000006</span>], s2[<span class="number">1000006</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">int</span> del1, del2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> from)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i, v[k].<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = v[k][i];</span><br><span class="line">        <span class="keyword">if</span> (x == from)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (dep[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dep[x] &lt; dep[k]) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((dep[k] - dep[x]) % <span class="number">2</span> == <span class="number">0</span>)d1[x]--, d1[k]++, del1 = x, del2 = k, cnt++;</span><br><span class="line">                <span class="keyword">else</span> d2[x]--, d2[k]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dep[x] = dep[k] + <span class="number">1</span>;</span><br><span class="line">        fa[x] = k;</span><br><span class="line">        <span class="built_in">dfs</span>(x, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">dfs2</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;tmp, sum;</span><br><span class="line">    sum.fi = d1[k], sum.se = d2[k];</span><br><span class="line">    <span class="built_in">rep</span>(i, v[k].<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = v[k][i];</span><br><span class="line">        <span class="keyword">if</span> (fa[x] != k)<span class="keyword">continue</span>;</span><br><span class="line">        tmp = <span class="built_in">dfs2</span>(x);</span><br><span class="line">        sum.fi += tmp.fi, sum.se += tmp.se;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum.fi == cnt &amp;&amp; sum.se == <span class="number">0</span>)del1 = fa[k], del2 = k;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000006</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getans</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i, v[k].<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[v[k][i]] != <span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (k == del1 &amp;&amp; v[k][i] == del2)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (k == del2 &amp;&amp; v[k][i] == del1)<span class="keyword">continue</span>;</span><br><span class="line">        ans[v[k][i]] = <span class="number">1</span> - ans[k];</span><br><span class="line">        <span class="built_in">getans</span>(v[k][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="built_in">rep</span>(i, n)v[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i, m) &#123;</span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        a[i]--, b[i]--;</span><br><span class="line">        v[a[i]].<span class="built_in">pb</span>(b[i]);</span><br><span class="line">        v[b[i]].<span class="built_in">pb</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)ans[i] = <span class="number">-1</span>, dep[i] = d1[i] = d2[i] = <span class="number">0</span>;</span><br><span class="line">    dep[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    del1 = del2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        del1 = del2 = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (del1 == <span class="number">-1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">getans</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, m)<span class="keyword">if</span> (!ans[a[i]] &amp;&amp; !ans[b[i]]) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(j, n)ans[j] = <span class="number">1</span> - ans[j];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i, n)cout &lt;&lt; ans[i];</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1680/problem/F&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DFS 树的性质。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://rushroom.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="树" scheme="http://rushroom.top/tags/%E6%A0%91/"/>
    
    <category term="Codeforces" scheme="http://rushroom.top/tags/Codeforces/"/>
    
    <category term="二分图" scheme="http://rushroom.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
</feed>
